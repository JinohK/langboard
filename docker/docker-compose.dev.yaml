name: ${PROJECT_NAME}

services:
  server:
    init: true
    container_name: ${PROJECT_NAME}_server
    image: nginx:latest
    ports:
      - "${NGINX_FRONTEND_EXPOSE_PORT}:8000"
      - "${NGINX_SOCKET_EXPOSE_PORT}:8010"
      - "${NGINX_API_EXPOSE_PORT}:8020"
      - "${DOCS_EXPOSE_PORT}:8030"
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - BACKEND_HOST=${PROJECT_NAME}_backend:${BACKEND_PORT}
      - DOCS_HOST=${PROJECT_NAME}_docs:3000
    volumes:
      - ./server/conf.template:/etc/nginx/templates/default.conf.template
      - ./server/nginx.conf:/etc/nginx/nginx.conf
      - ../src/frontend/dist:/usr/share/nginx/html
    command: [nginx-debug, "-g", "daemon off;"]
    networks:
      - dev_net
    restart: always

  frontend:
    init: true
    container_name: ${PROJECT_NAME}_frontend
    build:
      context: ../src/frontend
    environment:
      - ENVIRONMENT=development
      - PROJECT_NAME=${PROJECT_NAME}
      - PROJECT_SHORT_NAME=${PROJECT_SHORT_NAME}
      - SOCKET_URL=${SOCKET_URL}
      - API_URL=${API_URL}
      - PUBLIC_FRONTEND_URL=${PUBLIC_FRONTEND_URL}
    working_dir: /app
    command: yarn build -w
    volumes:
      - ../src/frontend/src:/app/src
      - ../src/frontend/dist:/app/dist:rw
      - ../src/frontend/vite.config.ts:/app/vite.config.ts
      - ../src/frontend/tailwind.config.js:/app/tailwind.config.js
      - ../src/frontend/postcss.config.js:/app/postcss.config.js
      - ../.env:/app/.env
    networks:
      - dev_net
    restart: always

  backend:
    init: true
    container_name: ${PROJECT_NAME}_backend
    build:
      context: ../
    deploy:
      replicas: ${BACKEND_REPLICAS:-1}
    environment:
      - ENVIRONMENT=development
      - PROJECT_NAME=${PROJECT_NAME}
      - BACKEND_HOST=${PROJECT_NAME}_backend
      - BACKEND_PORT=${BACKEND_PORT}
      - TERMINAL_LOGGING_LEVEL=${TERMINAL_LOGGING_LEVEL}
      - FILE_LOGGING_LEVEL=${FILE_LOGGING_LEVEL}
      - LOGGING_DIR=${LOGGING_DIR}
      - CRON_TAB_FILE=${CRON_TAB_FILE}
      - SENTRY_DSN=${SENTRY_DSN}
      - MAIN_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PROJECT_NAME}_db:5432/${POSTGRES_DB}
      - MAIN_DATABASE_ROLE=${MAIN_DATABASE_ROLE}
      - SUB_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PROJECT_NAME}_db_replica:5432/${POSTGRES_DB}
      - SUB_DATABASE_ROLE=${SUB_DATABASE_ROLE}
      - CACHE_TYPE=redis
      - CACHE_URL=redis://:${REDIS_PASSWORD}@${PROJECT_NAME}_redis:6379/0
      - COMMON_SECRET_KEY=${COMMON_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_AT_EXPIRATION=${JWT_AT_EXPIRATION}
      - JWT_RT_EXPIRATION=${JWT_RT_EXPIRATION}
      - LOCAL_STORAGE_DIR=${LOCAL_STORAGE_DIR}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION_NAME=${S3_REGION_NAME}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - FRONTEND_PORT=${NGINX_FRONTEND_EXPOSE_PORT}
      - PUBLIC_FRONTEND_URL=${PUBLIC_FRONTEND_URL}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_STARTTLS=${MAIL_STARTTLS}
      - MAIL_SSL_TLS=${MAIL_SSL_TLS}
    working_dir: /app
    command: ${PROJECT_NAME} run -w
    volumes:
      - ../src/backend/${PROJECT_NAME}:/app/src/backend/${PROJECT_NAME}
      - ../pyproject.toml:/app/pyproject.toml
      - ../poetry.lock:/app/poetry.lock
      - ../README.md:/app/README.md
      - ../LICENSE:/app/LICENSE
      - ../alembic.ini:/app/alembic.ini
      - ../local:/app/local
      - ./volumes/crontab:/etc/crontab
      - ../scripts/run_bot_cron.sh:/app/scripts/run_bot_cron.sh:x
    depends_on:
      - db
    networks:
      - dev_net
    restart: always

  docs:
    init: true
    container_name: ${PROJECT_NAME}_docs
    build:
      context: ../docs
      target: dev
    working_dir: /opt/docusaurus
    environment:
      - NODE_ENV=development
    volumes:
      - ../docs/src:/opt/docusaurus/src
      - ../docs/docs:/opt/docusaurus/docs
      - ../docs/static:/opt/docusaurus/static
      - ../docs/docusaurus.config.ts:/opt/docusaurus/docusaurus.config.ts
      - ../docs/sidebars.ts:/opt/docusaurus/sidebars.ts
      - ../docs/tsconfig.json:/opt/docusaurus/tsconfig.json
      - ../docs/package.json:/opt/docusaurus/package.json
      - ../docs/yarn.lock:/opt/docusaurus/yarn.lock
      - ../.env:/opt/.env
    ports:
      - 3000
    depends_on:
      - backend
    networks:
      - dev_net
    restart: always

  redis:
    init: true
    container_name: ${PROJECT_NAME}_redis
    command: redis-server --port 6379 --requirepass ${REDIS_PASSWORD}
    image: redis:latest
    environment:
      - REQUIREPASS=${REDIS_PASSWORD}
      - CLIENTPORT=6379
      - REDIS_LOG_DIR=/${REDIS_LOG_DIR}
      - REDIS_LOG_FILE=/${REDIS_LOG_FILE}
    volumes:
      - ./volumes/cache:/data
      - ./volumes/logs/redis:/${REDIS_LOG_DIR}
      - ./cache/redis.conf:/usr/local/bin/redis.conf
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - dev_net
    restart: always

  db:
    init: true
    image: bitnami/postgresql:17.4.0-debian-12-r4
    container_name: ${PROJECT_NAME}_db
    ports:
      - ${MASTER_POSTGRES_PORT}:5432
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRES_DB}
      - POSTGRESQL_LOG_TIMEZONE=UTC
      - POSTGRESQL_TIMEZONE=UTC
    volumes:
      - ./volumes/db:/bitnami/postgresql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dev_net
    restart: always

  db-replica:
    init: true
    image: bitnami/postgresql:17.4.0-debian-12-r4
    container_name: ${PROJECT_NAME}_db_replica
    ports:
      - ${REPLICA_POSTGRES_PORT}:5432
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRESQL_MASTER_HOST=${PROJECT_NAME}_db
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_LOG_TIMEZONE=UTC
      - POSTGRESQL_TIMEZONE=UTC
    networks:
      - dev_net
    depends_on:
      - db
    restart: always

  db-backup:
    init: true
    image: bitnami/postgresql:17.4.0-debian-12-r4
    container_name: ${PROJECT_NAME}_db_backup
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRESQL_MASTER_HOST=${PROJECT_NAME}_db
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_LOG_TIMEZONE=UTC
      - POSTGRESQL_TIMEZONE=UTC
    volumes:
      - ./volumes/db_backup:/backup
      - ./db/backup.sh:/docker-entrypoint-initdb.d/backup.sh
    networks:
      - dev_net
    depends_on:
      - db
    restart: always

networks:
  dev_net:
    driver: bridge
    ipam:
      driver: default
