name: ${PROJECT_NAME}

services:
  server:
    container_name: ${PROJECT_NAME}_server
    image: nginx:latest
    ports:
      - "${NGINX_FRONTEND_EXPOSE_PORT}:8000"
      - "${NGINX_SOCKET_EXPOSE_PORT}:8010"
      - "${NGINX_API_EXPOSE_PORT}:8020"
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - BACKEND_HOST=${PROJECT_NAME}_backend:${BACKEND_PORT}
    volumes:
      - ./server/prod.conf.template:/etc/nginx/templates/default.conf.template
      - ./server/nginx.conf:/etc/nginx/nginx.conf
      - ../src/frontend/dist:/usr/share/nginx/html
    networks:
      - prod_net
    restart: always

  backend:
    container_name: ${PROJECT_NAME}_backend
    build:
      context: ../src/backend
    deploy:
      replicas: ${BACKEND_REPLICAS:-1}
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=${PROJECT_NAME}
      - BACKEND_HOST=${PROJECT_NAME}_backend
      - BACKEND_PORT=${BACKEND_PORT}
      - TERMINAL_LOGGING_LEVEL=${TERMINAL_LOGGING_LEVEL}
      - FILE_LOGGING_LEVEL=${FILE_LOGGING_LEVEL}
      - LOGGING_DIR=${LOGGING_DIR}
      - MAIN_DATABASE_URL=postresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PROJECT_NAME}_db:${MASTER_POSTGRES_PORT}/${POSTGRES_DB}
      - MAIN_DATABASE_ROLE=${MAIN_DATABASE_ROLE}
      - SUB_DATABASE_URL=postresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PROJECT_NAME}_db_replica:${REPLICA_POSTGRES_PORT}/${POSTGRES_DB}
      - SUB_DATABASE_ROLE=${SUB_DATABASE_ROLE}
      - CACHE_TYPE=redis
      - CACHE_URL=redis://:${REDIS_PASSWORD}@${PROJECT_NAME}_redis:${REDIS_PORT}/0
      - COMMON_SECRET_KEY=${COMMON_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_AT_EXPIRATION=${JWT_AT_EXPIRATION}
      - JWT_RT_EXPIRATION=${JWT_RT_EXPIRATION}
      - LOCAL_STORAGE_DIR=${LOCAL_STORAGE_DIR}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION_NAME=${S3_REGION_NAME}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    working_dir: /app
    command: pypy3 -m ${PROJECT_NAME} run -w
    volumes:
      - ../src/backend/${PROJECT_NAME}:/app/${PROJECT_NAME}
      - ../src/backend/requirements.txt:/app/requirements.txt
    networks:
      - prod_net
    restart: always

  redis:
    container_name: ${PROJECT_NAME}_redis
    command: redis-server --port 6379 --requirepass ${REDIS_PASSWORD}
    image: redis:latest
    environment:
      - REQUIREPASS=${REDIS_PASSWORD}
      - CLIENTPORT=6379
      - REDIS_LOG_FILE=${REDIS_LOG_FILE}
    volumes:
      - ./volumes/cache:/data
      - ../logs/redis:${REDIS_LOG_FILE}
      - ./cache/redis.conf:/usr/local/bin/redis.conf
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - prod_net
    restart: always

  db:
    image: postgres:latest
    container_name: ${PROJECT_NAME}_db
    ports:
      - ${MASTER_POSTGRES_PORT}:5432
    environment:
      - POSTGRES_LOG_HOSTNAME=true
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - TZ=UTC
      - PGTZ=UTC
    volumes:
      - ./volumes/db:/var/lib/postgresql/data:Z
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - prod_net
    restart: always

  db-replica:
    image: postgres:latest
    container_name: ${PROJECT_NAME}_db_replica
    ports:
      - ${REPLICA_POSTGRES_PORT}:5432
    environment:
      - POSTGRES_LOG_HOSTNAME=true
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_MASTER_HOST=${PROJECT_NAME}_db
      - POSTGRES_MASTER_PORT_NUMBER=${MASTER_POSTGRES_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - TZ=UTC
      - PGTZ=UTC
    networks:
      - prod_net
    depends_on:
      - db
    restart: always

  db-backup:
    image: postgres:latest
    container_name: ${PROJECT_NAME}_db_backup
    environment:
      - POSTGRES_LOG_HOSTNAME=true
      - POSTGRES_REPLICATION_MODE=backup
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_MASTER_HOST=${PROJECT_NAME}_db
      - POSTGRES_MASTER_PORT_NUMBER=${MASTER_POSTGRES_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - TZ=UTC
      - PGTZ=UTC
    volumes:
      - ./volumes/db_backup:/backup:Z
      - ./db/backup.sh:/docker-entrypoint-initdb.d/backup.sh
    networks:
      - prod_net
    depends_on:
      - db
    restart: always

networks:
  prod_net:
    driver: bridge
    ipam:
      driver: default