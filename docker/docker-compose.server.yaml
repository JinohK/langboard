services:
  server:
    init: true
    container_name: ${PROJECT_NAME}_server
    image: nginx:latest
    ports:
      - "${NGINX_UI_EXPOSE_PORT}:8000"
      - "${NGINX_SOCKET_EXPOSE_PORT}:8010"
      - "${NGINX_API_EXPOSE_PORT}:8020"
      - "${DOCS_EXPOSE_PORT}:8030"
    env_file:
      - ./envs/.nginx.env
    volumes:
      - ./server/conf.template:/etc/nginx/templates/default.conf.template
      - ./server/nginx.conf:/etc/nginx/nginx.conf
      - ../src/ui/dist:/usr/share/nginx/html
    command: [nginx-debug, "-g", "daemon off;"]
    depends_on:
      - ui
      - api
      - socket
    networks:
      - net
    restart: always

  ui:
    init: true
    container_name: ${PROJECT_NAME}_ui
    build:
      context: ../src
      dockerfile: ui/Dockerfile
    env_file:
      - ./envs/.ui.env
    working_dir: /app
    command: yarn build
    volumes:
      - ../src/ui/src:/app/src
      - ../src/ui/dist:/app/dist:rw
      - ../src/shared/ts:/shared/ts
      - ../src/ui/vite.config.ts:/app/vite.config.ts
      - ../src/ui/tailwind.config.js:/app/tailwind.config.js
      - ../src/ui/postcss.config.js:/app/postcss.config.js
    networks:
      - net

  api: &api
    init: true
    container_name: ${PROJECT_NAME}_api
    build:
      context: ../
      target: with-cron
    env_file:
      - ./envs/.api.env
    working_dir: /app
    command: ${PROJECT_NAME} run --workers ${API_WORKERS_COUNT:-1}
    volumes:
      - ../src/api/${PROJECT_NAME}:/app/src/api/${PROJECT_NAME}
      - ../src/shared/py:/app/src/shared/py
      - ../src/resources:/app/src/resources
      - ../pyproject.toml:/app/pyproject.toml
      - ../poetry.lock:/app/poetry.lock
      - ../README.md:/app/README.md
      - ../LICENSE:/app/LICENSE
      - ../alembic.ini:/app/alembic.ini
      - ../local:/app/local
      - ../scripts/run_bot_cron.sh:/app/scripts/run_bot_cron.sh:x
    depends_on:
      - db-bouncer
      - kafka0
      - kafka1
      - kafka2
    networks:
      - net
    restart: always

  celeryworker:
    <<: *api
    init: true
    container_name: ${PROJECT_NAME}_celeryworker
    build:
      context: ../
      target: base
    command: langboard run:broker

  socket:
    init: true
    container_name: ${PROJECT_NAME}_socket
    build:
      context: ../src
      dockerfile: socket/Dockerfile
    env_file:
      - ./envs/.socket.env
    working_dir: /app
    volumes:
      - ../src/socket/package.json:/app/package.json
      - ../src/socket/yarn.lock:/app/yarn.lock
      - ../src/shared/ts:/shared/ts
      - ../src/resources:/app/resources
      - ../.env:/app/.env
    depends_on:
      - db-bouncer
      - kafka0
      - kafka1
      - kafka2
    networks:
      - net
    restart: always

  flows:
    init: true
    container_name: ${PROJECT_NAME}_flows
    build:
      context: ../src/flows
    env_file:
      - ./envs/.flows.env
    environment:
      UV_HTTP_TIMEOUT: "60s"
    working_dir: /app/src/flows
    command: uv run flows run --workers ${FLOWS_WORKERS_COUNT:-1}
    volumes:
      - ../src/flows/${PROJECT_NAME}_flows:/app/src/flows/${PROJECT_NAME}_flows
      - ../src/shared/py:/app/src/shared/py
      - ../src/resources:/app/src/resources
      - ../src/flows/pyproject.toml:/app/src/flows/pyproject.toml
      - ../src/flows/uv.lock:/app/src/flows/uv.lock
      - ../local:/app/local
    depends_on:
      - db-bouncer
      - kafka0
      - kafka1
      - kafka2
      - api
    networks:
      - net
    restart: always
