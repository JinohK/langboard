import EHttpStatus from "@/core/helpers/EHttpStatus";

const errorMessages: Record<number, string> = {
    [EHttpStatus.HTTP_400_BAD_REQUEST]: "BAD REQUEST",
    [EHttpStatus.HTTP_401_UNAUTHORIZED]: "UNAUTHORIZED",
    [EHttpStatus.HTTP_402_PAYMENT_REQUIRED]: "PAYMENT REQUIRED",
    [EHttpStatus.HTTP_403_FORBIDDEN]: "FORBIDDEN",
    [EHttpStatus.HTTP_404_NOT_FOUND]: "NOT FOUND",
    [EHttpStatus.HTTP_405_METHOD_NOT_ALLOWED]: "METHOD NOT ALLOWED",
    [EHttpStatus.HTTP_406_NOT_ACCEPTABLE]: "NOT ACCEPTABLE",
    [EHttpStatus.HTTP_407_PROXY_AUTHENTICATION_REQUIRED]: "PROXY AUTHENTICATION REQUIRED",
    [EHttpStatus.HTTP_408_REQUEST_TIMEOUT]: "REQUEST TIMEOUT",
    [EHttpStatus.HTTP_409_CONFLICT]: "CONFLICT",
    [EHttpStatus.HTTP_410_GONE]: "GONE",
    [EHttpStatus.HTTP_411_LENGTH_REQUIRED]: "LENGTH REQUIRED",
    [EHttpStatus.HTTP_412_PRECONDITION_FAILED]: "PRECONDITION FAILED",
    [EHttpStatus.HTTP_413_REQUEST_ENTITY_TOO_LARGE]: "REQUEST ENTITY TOO LARGE",
    [EHttpStatus.HTTP_414_REQUEST_URI_TOO_LONG]: "REQUEST URI TOO LONG",
    [EHttpStatus.HTTP_415_UNSUPPORTED_MEDIA_TYPE]: "UNSUPPORTED MEDIA TYPE",
    [EHttpStatus.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE]: "REQUESTED RANGE NOT SATISFIABLE",
    [EHttpStatus.HTTP_417_EXPECTATION_FAILED]: "EXPECTATION FAILED",
    [EHttpStatus.HTTP_418_IM_A_TEAPOT]: "IM A TEAPOT",
    [EHttpStatus.HTTP_421_MISDIRECTED_REQUEST]: "MISDIRECTED REQUEST",
    [EHttpStatus.HTTP_422_UNPROCESSABLE_ENTITY]: "UNPROCESSABLE ENTITY",
    [EHttpStatus.HTTP_423_LOCKED]: "LOCKED",
    [EHttpStatus.HTTP_424_FAILED_DEPENDENCY]: "FAILED DEPENDENCY",
    [EHttpStatus.HTTP_425_TOO_EARLY]: "TOO EARLY",
    [EHttpStatus.HTTP_426_UPGRADE_REQUIRED]: "UPGRADE REQUIRED",
    [EHttpStatus.HTTP_428_PRECONDITION_REQUIRED]: "PRECONDITION REQUIRED",
    [EHttpStatus.HTTP_429_TOO_MANY_REQUESTS]: "TOO MANY REQUESTS",
    [EHttpStatus.HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE]: "REQUEST HEADER FIELDS TOO LARGE",
    [EHttpStatus.HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS]: "UNAVAILABLE FOR LEGAL REASONS",
};

const getErrorMessage = (errorCode: EHttpStatus): string => {
    return errorMessages[errorCode] || errorMessages[EHttpStatus.HTTP_404_NOT_FOUND];
};

export default getErrorMessage;
