{"access_type":"PRIVATE","action_description":null,"action_name":null,"data":{"edges":[{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-7AUpc","name":"message","output_types":["Message"]},"targetHandle":{"fieldName":"chat_input_value","id":"LangboardApiChatInterceptorComponent-nqYTF","inputTypes":["Message"],"type":"other"}},"id":"reactflow__edge-ChatInput-7AUpc{œdataTypeœ:œChatInputœ,œidœ:œChatInput-7AUpcœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangboardApiChatInterceptorComponent-nqYTF{œfieldNameœ:œchat_input_valueœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œinputTypesœ:[œMessageœ],œtypeœ:œotherœ}","selected":false,"source":"ChatInput-7AUpc","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-7AUpcœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"LangboardApiChatInterceptorComponent-nqYTF","targetHandle":"{œfieldNameœ:œchat_input_valueœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œinputTypesœ:[œMessageœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"LangboardCalledVariablesComponent","id":"LangboardCalledVariablesComponent-fZmZu","name":"output","output_types":["Data"]},"targetHandle":{"fieldName":"langboard_variables","id":"LangboardApiChatInterceptorComponent-nqYTF","inputTypes":["Data"],"type":"other"}},"id":"reactflow__edge-LangboardCalledVariablesComponent-fZmZu{œdataTypeœ:œLangboardCalledVariablesComponentœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-LangboardApiChatInterceptorComponent-nqYTF{œfieldNameœ:œlangboard_variablesœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","selected":false,"source":"LangboardCalledVariablesComponent-fZmZu","sourceHandle":"{œdataTypeœ:œLangboardCalledVariablesComponentœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}","target":"LangboardApiChatInterceptorComponent-nqYTF","targetHandle":"{œfieldNameœ:œlangboard_variablesœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"LangboardApiDefaultTriggerPromptsComponent","id":"LangboardApiDefaultTriggerPromptsComponent-XPexk","name":"default_trigger_prompts","output_types":["LangboardApiDefaultTriggerPromptsComponent"]},"targetHandle":{"fieldName":"default_trigger_prompts","id":"LangboardApiChatInterceptorComponent-nqYTF","inputTypes":["LangboardApiDefaultTriggerPromptsComponent"],"type":"other"}},"id":"reactflow__edge-LangboardApiDefaultTriggerPromptsComponent-XPexk{œdataTypeœ:œLangboardApiDefaultTriggerPromptsComponentœ,œidœ:œLangboardApiDefaultTriggerPromptsComponent-XPexkœ,œnameœ:œdefault_trigger_promptsœ,œoutput_typesœ:[œLangboardApiDefaultTriggerPromptsComponentœ]}-LangboardApiChatInterceptorComponent-nqYTF{œfieldNameœ:œdefault_trigger_promptsœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œinputTypesœ:[œLangboardApiDefaultTriggerPromptsComponentœ],œtypeœ:œotherœ}","selected":false,"source":"LangboardApiDefaultTriggerPromptsComponent-XPexk","sourceHandle":"{œdataTypeœ:œLangboardApiDefaultTriggerPromptsComponentœ,œidœ:œLangboardApiDefaultTriggerPromptsComponent-XPexkœ,œnameœ:œdefault_trigger_promptsœ,œoutput_typesœ:[œLangboardApiDefaultTriggerPromptsComponentœ]}","target":"LangboardApiChatInterceptorComponent-nqYTF","targetHandle":"{œfieldNameœ:œdefault_trigger_promptsœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œinputTypesœ:[œLangboardApiDefaultTriggerPromptsComponentœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"TimezoneComponent","id":"TimezoneComponent-u6FVU","name":"output","output_types":["Message"]},"targetHandle":{"fieldName":"timezone_text","id":"get_datetime-AmL5l","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-TimezoneComponent-u6FVU{œdataTypeœ:œTimezoneComponentœ,œidœ:œTimezoneComponent-u6FVUœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-get_datetime-AmL5l{œfieldNameœ:œtimezone_textœ,œidœ:œget_datetime-AmL5lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","selected":false,"source":"TimezoneComponent-u6FVU","sourceHandle":"{œdataTypeœ:œTimezoneComponentœ,œidœ:œTimezoneComponent-u6FVUœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}","target":"get_datetime-AmL5l","targetHandle":"{œfieldNameœ:œtimezone_textœ,œidœ:œget_datetime-AmL5lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"TimezoneComponent","id":"TimezoneComponent-u6FVU","name":"output","output_types":["Message"]},"targetHandle":{"fieldName":"timezone_text","id":"convert_timezone_tool-o0Rhd","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-TimezoneComponent-u6FVU{œdataTypeœ:œTimezoneComponentœ,œidœ:œTimezoneComponent-u6FVUœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-convert_timezone_tool-o0Rhd{œfieldNameœ:œtimezone_textœ,œidœ:œconvert_timezone_tool-o0Rhdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","selected":false,"source":"TimezoneComponent-u6FVU","sourceHandle":"{œdataTypeœ:œTimezoneComponentœ,œidœ:œTimezoneComponent-u6FVUœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}","target":"convert_timezone_tool-o0Rhd","targetHandle":"{œfieldNameœ:œtimezone_textœ,œidœ:œconvert_timezone_tool-o0Rhdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"get_datetime","id":"get_datetime-AmL5l","name":"result","output_types":["Message"]},"targetHandle":{"fieldName":"current_date","id":"Prompt-ub2Gs","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-get_datetime-AmL5l{œdataTypeœ:œget_datetimeœ,œidœ:œget_datetime-AmL5lœ,œnameœ:œresultœ,œoutput_typesœ:[œMessageœ]}-Prompt-ub2Gs{œfieldNameœ:œcurrent_dateœ,œidœ:œPrompt-ub2Gsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","selected":false,"source":"get_datetime-AmL5l","sourceHandle":"{œdataTypeœ:œget_datetimeœ,œidœ:œget_datetime-AmL5lœ,œnameœ:œresultœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-ub2Gs","targetHandle":"{œfieldNameœ:œcurrent_dateœ,œidœ:œPrompt-ub2Gsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"Webhook","id":"Webhook-IU4Zq","name":"output_data","output_types":["Data"]},"targetHandle":{"fieldName":"webhook","id":"LangboardCalledVariablesComponent-fZmZu","inputTypes":["Data"],"type":"other"}},"id":"reactflow__edge-Webhook-IU4Zq{œdataTypeœ:œWebhookœ,œidœ:œWebhook-IU4Zqœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}-LangboardCalledVariablesComponent-fZmZu{œfieldNameœ:œwebhookœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","selected":false,"source":"Webhook-IU4Zq","sourceHandle":"{œdataTypeœ:œWebhookœ,œidœ:œWebhook-IU4Zqœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}","target":"LangboardCalledVariablesComponent-fZmZu","targetHandle":"{œfieldNameœ:œwebhookœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"LangboardCalledVariablesComponent","id":"LangboardCalledVariablesComponent-fZmZu","name":"output","output_types":["Data"]},"targetHandle":{"fieldName":"langboard_variables","id":"get_custom_markdown_formats_tool-S5Wae","inputTypes":["Data"],"type":"other"}},"id":"reactflow__edge-LangboardCalledVariablesComponent-fZmZu{œdataTypeœ:œLangboardCalledVariablesComponentœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-get_custom_markdown_formats_tool-S5Wae{œfieldNameœ:œlangboard_variablesœ,œidœ:œget_custom_markdown_formats_tool-S5Waeœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","selected":false,"source":"LangboardCalledVariablesComponent-fZmZu","sourceHandle":"{œdataTypeœ:œLangboardCalledVariablesComponentœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}","target":"get_custom_markdown_formats_tool-S5Wae","targetHandle":"{œfieldNameœ:œlangboard_variablesœ,œidœ:œget_custom_markdown_formats_tool-S5Waeœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"get_custom_markdown_formats_tool","id":"get_custom_markdown_formats_tool-S5Wae","name":"converted_date","output_types":["Tool"]},"targetHandle":{"fieldName":"tools","id":"Agent-r81GD","inputTypes":["Tool"],"type":"other"}},"id":"reactflow__edge-get_custom_markdown_formats_tool-S5Wae{œdataTypeœ:œget_custom_markdown_formats_toolœ,œidœ:œget_custom_markdown_formats_tool-S5Waeœ,œnameœ:œconverted_dateœ,œoutput_typesœ:[œToolœ]}-Agent-r81GD{œfieldNameœ:œtoolsœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}","selected":false,"source":"get_custom_markdown_formats_tool-S5Wae","sourceHandle":"{œdataTypeœ:œget_custom_markdown_formats_toolœ,œidœ:œget_custom_markdown_formats_tool-S5Waeœ,œnameœ:œconverted_dateœ,œoutput_typesœ:[œToolœ]}","target":"Agent-r81GD","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"convert_timezone_tool","id":"convert_timezone_tool-o0Rhd","name":"converted_date","output_types":["Tool"]},"targetHandle":{"fieldName":"tools","id":"Agent-r81GD","inputTypes":["Tool"],"type":"other"}},"id":"reactflow__edge-convert_timezone_tool-o0Rhd{œdataTypeœ:œconvert_timezone_toolœ,œidœ:œconvert_timezone_tool-o0Rhdœ,œnameœ:œconverted_dateœ,œoutput_typesœ:[œToolœ]}-Agent-r81GD{œfieldNameœ:œtoolsœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}","selected":false,"source":"convert_timezone_tool-o0Rhd","sourceHandle":"{œdataTypeœ:œconvert_timezone_toolœ,œidœ:œconvert_timezone_tool-o0Rhdœ,œnameœ:œconverted_dateœ,œoutput_typesœ:[œToolœ]}","target":"Agent-r81GD","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"LangboardCalledVariablesComponent","id":"LangboardCalledVariablesComponent-fZmZu","name":"tools","output_types":["Tool"]},"targetHandle":{"fieldName":"tools","id":"Agent-r81GD","inputTypes":["Tool"],"type":"other"}},"id":"reactflow__edge-LangboardCalledVariablesComponent-fZmZu{œdataTypeœ:œLangboardCalledVariablesComponentœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Agent-r81GD{œfieldNameœ:œtoolsœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}","selected":false,"source":"LangboardCalledVariablesComponent-fZmZu","sourceHandle":"{œdataTypeœ:œLangboardCalledVariablesComponentœ,œidœ:œLangboardCalledVariablesComponent-fZmZuœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}","target":"Agent-r81GD","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"Prompt","id":"Prompt-ub2Gs","name":"prompt","output_types":["Message"]},"targetHandle":{"fieldName":"system_prompt","id":"Agent-r81GD","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-Prompt-ub2Gs{œdataTypeœ:œPromptœ,œidœ:œPrompt-ub2Gsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-r81GD{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","selected":false,"source":"Prompt-ub2Gs","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-ub2Gsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"Agent-r81GD","targetHandle":"{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"LangboardApiChatInterceptorComponent","id":"LangboardApiChatInterceptorComponent-nqYTF","name":"message","output_types":["Message"]},"targetHandle":{"fieldName":"input_value","id":"Agent-r81GD","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-LangboardApiChatInterceptorComponent-nqYTF{œdataTypeœ:œLangboardApiChatInterceptorComponentœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-r81GD{œfieldNameœ:œinput_valueœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","selected":false,"source":"LangboardApiChatInterceptorComponent-nqYTF","sourceHandle":"{œdataTypeœ:œLangboardApiChatInterceptorComponentœ,œidœ:œLangboardApiChatInterceptorComponent-nqYTFœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Agent-r81GD","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"Agent","id":"Agent-r81GD","name":"response","output_types":["Message"]},"targetHandle":{"fieldName":"input_value","id":"ChatOutput-51Ihf","inputTypes":["Data","DataFrame","Message"],"type":"other"}},"id":"reactflow__edge-Agent-r81GD{œdataTypeœ:œAgentœ,œidœ:œAgent-r81GDœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-51Ihf{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-51Ihfœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}","selected":false,"source":"Agent-r81GD","sourceHandle":"{œdataTypeœ:œAgentœ,œidœ:œAgent-r81GDœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-51Ihf","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-51Ihfœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"},{"animated":false,"className":"","data":{"sourceHandle":{"dataType":"OllamaModel","id":"OllamaModel-aYbAX","name":"model_output","output_types":["LanguageModel"]},"targetHandle":{"fieldName":"agent_llm","id":"Agent-r81GD","inputTypes":["LanguageModel"],"type":"str"}},"id":"xy-edge__OllamaModel-aYbAX{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-aYbAXœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-r81GD{œfieldNameœ:œagent_llmœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}","selected":false,"source":"OllamaModel-aYbAX","sourceHandle":"{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-aYbAXœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","target":"Agent-r81GD","targetHandle":"{œfieldNameœ:œagent_llmœ,œidœ:œAgent-r81GDœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}"},{"className":"","data":{"sourceHandle":{"dataType":"Prompt","id":"Prompt-ub2Gs","name":"prompt","output_types":["Message"]},"targetHandle":{"fieldName":"system_message","id":"OllamaModel-aYbAX","inputTypes":["Message"],"type":"str"}},"id":"xy-edge__Prompt-ub2Gs{œdataTypeœ:œPromptœ,œidœ:œPrompt-ub2Gsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-aYbAX{œfieldNameœ:œsystem_messageœ,œidœ:œOllamaModel-aYbAXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","source":"Prompt-ub2Gs","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-ub2Gsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OllamaModel-aYbAX","targetHandle":"{œfieldNameœ:œsystem_messageœ,œidœ:œOllamaModel-aYbAXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"}],"nodes":[{"data":{"id":"LangboardApiChatInterceptorComponent-nqYTF","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Langboard API Chat Interceptor","display_name":"Langboard API Chat Interceptor","documentation":"","edited":true,"field_order":["chat_input_value","langboard_variables","non_langboard_prompt","webhook_prompt","default_trigger_prompts"],"frozen":false,"legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Message","hidden":false,"method":"message_response","name":"message","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"},{"allows_loop":false,"cache":true,"display_name":"Prompt","hidden":null,"method":"prompt_response","name":"prompt_message","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"},{"allows_loop":false,"cache":true,"display_name":"Message Type","hidden":null,"method":"get_message_type","name":"get_message_type","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","chat_input_value":{"_input_type":"HandleInput","advanced":false,"display_name":"Chat Input","dynamic":false,"info":"","input_types":["Message"],"list":false,"list_add_label":"Add More","name":"chat_input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"import os\r\nimport json\r\nfrom langflow.custom import Component\r\nfrom langflow.io import HandleInput, MessageTextInput, Output\r\nfrom langflow.schema.data import Data\r\nfrom langflow.schema.message import Message\r\n\r\n\r\nclass LangboardApiChatInterceptorComponent(Component):\r\n    display_name = \"Langboard API Chat Interceptor\"\r\n    description = \"Langboard API Chat Interceptor\"\r\n    name = \"LangboardApiChatInterceptorComponent\"\r\n    chat_input_value: Message\r\n    langboard_variables: Data\r\n    non_langboard_prompt: Message\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"chat_input_value\",\r\n            display_name=\"Chat Input\",\r\n            input_types=[\"Message\"],\r\n        ),\r\n        HandleInput(\r\n            name=\"langboard_variables\",\r\n            display_name=\"Langboard Variables\",\r\n            input_types=[\"Data\"],\r\n        ),\r\n        MessageTextInput(\r\n            name=\"non_langboard_prompt\",\r\n            display_name=\"Non-Langboard Prompt\",\r\n            info=\"The prompt that will be triggered by langflow.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"webhook_prompt\",\r\n            display_name=\"Webhook Prompt\",\r\n            info=\"The prompt that will be triggered by langboard.\",\r\n        ),\r\n        HandleInput(\r\n            name=\"default_trigger_prompts\",\r\n            display_name=\"Default Trigger Prompts\",\r\n            info=\"The default trigger prompts that will be triggered by Langboard.\",\r\n            input_types=[\"LangboardApiDefaultTriggerPromptsComponent\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\r\n        Output(\r\n            display_name=\"Prompt\",\r\n            name=\"prompt_message\",\r\n            method=\"prompt_response\",\r\n        ),\r\n        Output(\r\n            display_name=\"Message Type\",\r\n            name=\"get_message_type\",\r\n            method=\"get_message_type\",\r\n        ),\r\n    ]\r\n\r\n    async def get_message_type(self) -> Message:\r\n        variables = self._get_langboard_variables()\r\n        return \"text\" if not variables[\"is_called_by_langboard\"] else \"data\"\r\n\r\n    async def message_response(self) -> Message:\r\n        variables = self._get_langboard_variables()\r\n        if not variables[\"is_called_by_langboard\"]:\r\n            return await self.default_response()\r\n\r\n        chat_message = self.chat_input_value.get_text()\r\n        event = variables.get(\"event\")\r\n        rest_data = variables.get(\"rest_data\")\r\n        message = \"\"\r\n        if rest_data:\r\n            message = f\"Data: {json.dumps(rest_data, default=str)}\"\r\n        if event == \"chat\":\r\n            if message:\r\n                message = f\"{message}{os.linesep}{os.linesep}\"\r\n            message = f\"{message}User message: {chat_message}\"\r\n        else:\r\n            if message:\r\n                message = f\"{message}{os.linesep}{os.linesep}\"\r\n            message = f\"{message}Event: {event}\"\r\n        return self._create_message_with_files(message)\r\n\r\n    async def prompt_response(self) -> Message:\r\n        try:\r\n            variables = self._get_langboard_variables()\r\n            if not variables[\"is_called_by_langboard\"]:\r\n                raise Exception(\"\")\r\n\r\n            event = variables.get(\"event\")\r\n            if not event:\r\n                return await self.non_langboard_response()\r\n\r\n            prompt = None\r\n            if self.default_trigger_prompts:\r\n                for trigger_condition in self.default_trigger_prompts.default_triggers:\r\n                    if trigger_condition != event:\r\n                        continue\r\n                    prompt = getattr(\r\n                        self.default_trigger_prompts,\r\n                        f\"{trigger_condition}_prompt\",\r\n                        None,\r\n                    )\r\n                    break\r\n\r\n            if not prompt:\r\n                prompt = self.webhook_prompt\r\n\r\n            if not prompt:\r\n                return Message(text=\"DO NOT USE ANY TOOLS. Send only the message '0'\")\r\n\r\n            if prompt == self.webhook_prompt:\r\n                return f\"{prompt}{os.linesep}\"\r\n\r\n            return f\"{prompt}{os.linesep}{self.webhook_prompt}{os.linesep}\"\r\n        except Exception:\r\n            return self.non_langboard_prompt\r\n\r\n    def _get_langboard_variables(self) -> dict:\r\n        if not self.langboard_variables or not self.langboard_variables.data:\r\n            raise Exception(\"No Langboard variables found.\")\r\n\r\n        return self.langboard_variables.data\r\n\r\n    async def non_langboard_response(self) -> Message:\r\n        prompt = Message.from_template(template=self.non_langboard_prompt)\r\n        self.status = prompt.text\r\n        return prompt\r\n\r\n    async def default_response(self) -> Message:\r\n        return await self.create_response(self.chat_input_value.get_text())\r\n\r\n    async def create_response(self, text: str) -> Message:\r\n        return self._create_message_with_files(text)\r\n\r\n    def _create_message_with_files(self, text: str) -> Message:\r\n        variables = self._get_langboard_variables()\r\n        spreadsheet_files = variables.get(\"spreadsheet_files\", [])\r\n        non_spreadsheet_files = variables.get(\"non_spreadsheet_files\", [])\r\n\r\n        if spreadsheet_files:\r\n            text = f\"{text}{os.linesep}{os.linesep}Spreadsheet files: {', '.join(spreadsheet_files)}\"\r\n        if non_spreadsheet_files:\r\n            text = f\"{text}{os.linesep}{os.linesep}Non-spreadsheet files: {', '.join(non_spreadsheet_files)}\"\r\n\r\n        return Message(text=text)\r\n"},"default_trigger_prompts":{"_input_type":"HandleInput","advanced":false,"display_name":"Default Trigger Prompts","dynamic":false,"info":"The default trigger prompts that will be triggered by Langboard.","input_types":["LangboardApiDefaultTriggerPromptsComponent"],"list":false,"list_add_label":"Add More","name":"default_trigger_prompts","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"langboard_variables":{"_input_type":"HandleInput","advanced":false,"display_name":"Langboard Variables","dynamic":false,"info":"","input_types":["Data"],"list":false,"list_add_label":"Add More","name":"langboard_variables","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"non_langboard_prompt":{"_input_type":"MessageTextInput","advanced":false,"display_name":"Non-Langboard Prompt","dynamic":false,"info":"The prompt that will be triggered by langflow.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"non_langboard_prompt","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"webhook_prompt":{"_input_type":"MessageTextInput","advanced":false,"display_name":"Webhook Prompt","dynamic":false,"info":"The prompt that will be triggered by langboard.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"webhook_prompt","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}},"tool_mode":false},"showNode":true,"type":"LangboardApiChatInterceptorComponent"},"id":"LangboardApiChatInterceptorComponent-nqYTF","measured":{"height":539,"width":320},"position":{"x":319.9588945367211,"y":-51.318753840376814},"selected":false,"type":"genericNode"},{"data":{"id":"ChatInput-7AUpc","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Get chat inputs from the Playground.","display_name":"Chat Input","documentation":"","edited":false,"field_order":["input_value","should_store_message","sender","sender_name","session_id","files","background_color","chat_icon","text_color"],"frozen":false,"icon":"MessagesSquare","legacy":false,"metadata":{},"minimized":true,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","background_color":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Background Color","dynamic":false,"info":"The background color of the icon.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"background_color","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"chat_icon":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Icon","dynamic":false,"info":"The icon of the message.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"chat_icon","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"},"files":{"_input_type":"FileInput","advanced":true,"display_name":"Files","dynamic":false,"fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"file_path":"","info":"Files to be sent with the message.","list":true,"list_add_label":"Add More","name":"files","placeholder":"","required":false,"show":true,"temp_file":true,"title_case":false,"trace_as_metadata":true,"type":"file","value":""},"input_value":{"_input_type":"MultilineInput","advanced":false,"copy_field":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as input.","input_types":[],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"sender":{"_input_type":"DropdownInput","advanced":true,"combobox":false,"dialog_inputs":{},"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":"User"},"sender_name":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"User"},"session_id":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"_input_type":"BoolInput","advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"list_add_label":"Add More","name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":true},"text_color":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Text Color","dynamic":false,"info":"The text color of the name","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"text_color","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}},"tool_mode":false},"showNode":false,"type":"ChatInput"},"id":"ChatInput-7AUpc","measured":{"height":66,"width":192},"position":{"x":-90.61719565899125,"y":-242.1305843116118},"selected":false,"type":"genericNode"},{"data":{"id":"LangboardCalledVariablesComponent-fZmZu","node":{"base_classes":["Data","Tool"],"beta":false,"conditional_paths":[],"custom_fields":{},"display_name":"LangboardCalledVariablesComponent","documentation":"","edited":true,"field_order":["webhook","files","base_url","api_names","event","app_api_token","project_uid","current_runner_type","current_runner_data","rest_data","custom_markdown_formats","is_called_by_langboard"],"frozen":false,"icon":"code","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Variables","hidden":false,"method":"build_output","name":"output","options":null,"required_inputs":null,"selected":"Data","tool_mode":true,"types":["Data"],"value":"__UNDEFINED__"},{"allows_loop":false,"cache":true,"display_name":"API Tools","hidden":false,"method":"build_api_tools","name":"tools","options":null,"required_inputs":null,"selected":"Tool","tool_mode":true,"types":["Tool"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","api_names":{"_input_type":"MultiselectInput","advanced":false,"combobox":false,"display_name":"API Names","dynamic":false,"info":"The API names to call.","list":true,"list_add_label":"Add More","name":"api_names","options":["batch_apis","is_project_available","get_project","get_project_assigned_users","get_project_columns","get_project_cards","is_project_assignee","get_bot_logs_by_card","get_bot_logs_by_column","get_bot_schedules_by_card","get_bot_schedules_by_column","schedule_bot_crons","reschedule_bot_crons","unschedule_bot_crons","create_bot_scope_in_project","toggle_bot_trigger_condition","delete_bot_scope","get_card_details","get_card_comments","create_card","change_card_details","update_card_assigned_users","change_card_order_or_move_column","update_card_labels","update_card_relationships","archive_card","delete_card","change_checkitem_title","change_checkitem_order_or_move_checklist","cardify_checkitem","toggle_checkitem_checked","delete_checkitem","get_card_checklists","create_checklist","create_checkitem","notify_checklist","change_checklist_title","change_checklist_order","toggle_checklist_checked","delete_checklist","add_card_comment","update_card_comment","delete_card_comment","toggle_reaction_card_comment","create_project_column","update_project_column_name","delete_project_column","get_project_details","change_project_details","create_project_label","change_project_label_details","change_project_label_order","delete_label","get_project_wikis","get_project_wiki_details","create_project_wiki","change_project_wiki_details","change_project_wiki_public","update_project_wiki_assignees","change_project_wiki_order","delete_project_wiki","get_bots","get_card_metadata","get_card_metadata_by_key","save_card_metadata","delete_card_metadata","get_wiki_metadata","get_wiki_metadata_by_key","save_wiki_metadata","delete_wiki_metadata"],"placeholder":"","real_time_refresh":true,"refresh_button":true,"required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":[]},"app_api_token":{"_input_type":"SecretStrInput","advanced":false,"display_name":"App API Token","dynamic":false,"info":"","input_types":[],"load_from_db":false,"name":"app_api_token","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"base_url":{"_input_type":"StrInput","advanced":false,"display_name":"Base URL","dynamic":false,"info":"Endpoint of the Langboard API. If you don't use Langboard as local, you must not connect vertex to this input.","list":false,"list_add_label":"Add More","load_from_db":false,"name":"base_url","placeholder":"","required":true,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from enum import Enum\r\nimport httpx\r\nimport requests\r\nimport os\r\nfrom urllib.parse import urljoin\r\nfrom typing import Any, Literal\r\nfrom langchain.tools import StructuredTool\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    Output,\r\n    HandleInput,\r\n    DropdownInput,\r\n    BoolInput,\r\n    NestedDictInput,\r\n    MultiselectInput,\r\n    SecretStrInput,\r\n)\r\nfrom langflow.schema import Data\r\nfrom langflow.field_typing import Tool\r\nfrom pydantic import BaseModel, Field\r\nfrom datetime import datetime\r\nimport json\r\n\r\n\r\nHTTP_STATUS_OK = 200\r\nHTTP_STATUS_NOT_FOUND = 404\r\nDEFAULT_BASE_URLS = [\r\n    \"http://localhost:5381\",\r\n    \"http://127.0.0.1:5381\",\r\n    \"http://0.0.0.0:5381\",\r\n]\r\nBOT_CREATED_EVENT = \"bot_created\"\r\n\r\n\r\nclass LangboardCalledVariablesComponent(Component):\r\n    display_name = \"LangboardCalledVariablesComponent\"\r\n    icon = \"code\"\r\n    name = \"LangboardCalledVariablesComponent\"\r\n\r\n    webhook: Data\r\n    files: list[Data] | None\r\n    base_url: str\r\n    event: str\r\n    app_api_token: str\r\n    project_uid: str\r\n    api_names: list[str]\r\n    current_runner_type: Literal[\"bot\", \"user\"]\r\n    current_runner_data: dict\r\n    rest_data: Data | None\r\n    custom_markdown_formats: Data | None\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"webhook\",\r\n            display_name=\"Webhook Input\",\r\n            input_types=[\"Data\"],\r\n        ),\r\n        HandleInput(\r\n            name=\"files\",\r\n            display_name=\"Files\",\r\n            input_types=[\"Data\"],\r\n        ),\r\n        StrInput(\r\n            name=\"base_url\",\r\n            display_name=\"Base URL\",\r\n            info=\"Endpoint of the Langboard API. If you don't use Langboard as local, you must not connect vertex to this input.\",\r\n            value=\"\",\r\n            required=True,\r\n        ),\r\n        MultiselectInput(\r\n            name=\"api_names\",\r\n            display_name=\"API Names\",\r\n            options=[],\r\n            value=[],\r\n            info=\"The API names to call.\",\r\n            refresh_button=True,\r\n            real_time_refresh=True,\r\n        ),\r\n        StrInput(\r\n            name=\"event\",\r\n            display_name=\"Event\",\r\n            value=\"\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"app_api_token\",\r\n            display_name=\"App API Token\",\r\n            value=\"\",\r\n        ),\r\n        StrInput(\r\n            name=\"project_uid\",\r\n            display_name=\"Project UID\",\r\n            value=\"\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"current_runner_type\",\r\n            display_name=\"Current Runner Type\",\r\n            options=[\"bot\", \"user\"],\r\n            value=\"\",\r\n        ),\r\n        NestedDictInput(\r\n            name=\"current_runner_data\",\r\n            display_name=\"Current Runner Data\",\r\n            value={},\r\n        ),\r\n        NestedDictInput(\r\n            name=\"rest_data\",\r\n            display_name=\"Rest Data\",\r\n            value={},\r\n        ),\r\n        NestedDictInput(\r\n            name=\"custom_markdown_formats\",\r\n            display_name=\"Custom Markdown Formats\",\r\n            value={},\r\n        ),\r\n        BoolInput(\r\n            name=\"is_called_by_langboard\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Variables\", name=\"output\", method=\"build_output\"),\r\n        Output(display_name=\"API Tools\", name=\"tools\", method=\"build_api_tools\"),\r\n    ]\r\n\r\n    async def build_output(self) -> Data:\r\n        if not self.base_url:\r\n            raise ValueError(\r\n                \"Base URL is required and must be set before calling this component.\"\r\n            )\r\n\r\n        variables = await self._create_variables()\r\n        self.status = variables\r\n        return variables\r\n\r\n    async def build_api_tools(self) -> list[Tool]:\r\n        variables = await self._create_variables()\r\n        base_url = variables.data.get(\"base_url\", {})\r\n        if not base_url:\r\n            raise ValueError(\"Base URL is required in Langboard variables.\")\r\n\r\n        with httpx.Client() as client:\r\n            res = client.get(\r\n                urljoin(\r\n                    base_url,\r\n                    f\"schema/api/list?api_names={','.join(self.api_names)}\",\r\n                )\r\n            )\r\n            res.raise_for_status()\r\n            result = res.json()\r\n            schemas = result.get(\"schemas\")\r\n            if not schemas:\r\n                raise ValueError(\"Schema not found.\")\r\n\r\n        tools: list[Tool] = []\r\n        local_vars = {}\r\n        api_schemas = {}\r\n        for api_name in schemas:\r\n            local_vars[api_name] = {\r\n                \"langboard_variables\": variables.data,\r\n            }\r\n            tool = self._create_tool(api_name, schemas[api_name], local_vars[api_name])\r\n            tools.append(tool)\r\n            api_schemas[api_name] = local_vars[api_name].get(\"RequestForm\", None)\r\n            if api_schemas[api_name]:\r\n                api_schemas[api_name] = api_schemas[api_name].model_json_schema()\r\n\r\n        schema_tool = self._create_schema_tool(api_schemas)\r\n        tools.append(schema_tool)\r\n\r\n        return tools\r\n\r\n    async def update_build_config(\r\n        self, build_config: dict, field_value: Any, field_name: str | None = None\r\n    ):\r\n        if field_name in {\"base_url\", \"api_names\"}:\r\n            url = build_config[\"base_url\"].get(\"value\", self.base_url)\r\n            if not url:\r\n                for base_url in DEFAULT_BASE_URLS:\r\n                    if await self._is_valid_langboard_url(base_url):\r\n                        build_config[\"base_url\"][\"value\"] = base_url\r\n\r\n            if url and await self._is_valid_langboard_url(url):\r\n                build_config[\"api_names\"][\"options\"] = await self._get_apis(url)\r\n            else:\r\n                build_config[\"api_names\"][\"options\"] = []\r\n\r\n        return build_config\r\n\r\n    async def _create_variables(self) -> Data:\r\n        data = {\"base_url\": self.base_url, \"is_called_by_langboard\": False}\r\n        tweaks = {\r\n            \"event\": self.event,\r\n            \"app_api_token\": self.app_api_token,\r\n            \"project_uid\": self.project_uid,\r\n            \"current_runner_type\": self.current_runner_type,\r\n            \"current_runner_data\": self.current_runner_data,\r\n            \"rest_data\": self.rest_data or {},\r\n            \"custom_markdown_formats\": self.custom_markdown_formats\r\n            if self.custom_markdown_formats\r\n            else {},\r\n        }\r\n\r\n        webhook_data = None\r\n        if self.webhook:\r\n            if \"payload\" in self.webhook.data:\r\n                if isinstance(self.webhook.data[\"payload\"], str):\r\n                    try:\r\n                        self.webhook.data[\"payload\"] = json.loads(\r\n                            self.webhook.data[\"payload\"].replace(\"\\n\", \"\\\\n\")\r\n                        )\r\n                    except Exception:\r\n                        raise ValueError(\"Invalid JSON string in webhook payload\")\r\n\r\n                if \"tweaks\" in self.webhook.data[\"payload\"]:\r\n                    tweaks.update(self.webhook.data[\"payload\"][\"tweaks\"])\r\n\r\n        if self.files:\r\n            files = self.files if isinstance(self.files, list) else [self.files]\r\n\r\n            spreadsheet_files = []\r\n            non_spreadsheet_files = []\r\n            for file in files:\r\n                if not isinstance(file, Data):\r\n                    continue\r\n\r\n                if \"file_path\" not in file.data or not file.data[\"file_path\"]:\r\n                    continue\r\n                if file.data[\"file_path\"].endswith((\".xlsx\", \".xls\", \".csv\")):\r\n                    spreadsheet_files.append(file.data[\"file_path\"])\r\n                else:\r\n                    non_spreadsheet_files.append(file.data[\"file_path\"])\r\n            data[\"spreadsheet_files\"] = spreadsheet_files\r\n            data[\"non_spreadsheet_files\"] = non_spreadsheet_files\r\n\r\n        event = tweaks.get(\"event\")\r\n        app_api_token = tweaks.get(\"app_api_token\")\r\n\r\n        if not event or not app_api_token:\r\n            return Data(data=data)\r\n\r\n        data[\"is_called_by_langboard\"] = True\r\n        data[\"rest_data\"] = webhook_data or tweaks.get(\"rest_data\", {})\r\n\r\n        data.update(tweaks)\r\n\r\n        return Data(data=data)\r\n\r\n    async def _set_current_runner(self, tweaks: dict):\r\n        project_uid = tweaks.get(\"project_uid\")\r\n        if not project_uid:\r\n            return\r\n\r\n        current_running_type = tweaks.get(\"current_runner_type\")\r\n        if current_running_type not in [\"bot\", \"user\"]:\r\n            raise ValueError(\"current_runner_type must be either 'bot' or 'user'\")\r\n        current_runner_data = tweaks.get(\"current_runner_data\")\r\n        if not current_runner_data:\r\n            raise ValueError(\"current_runner_data must be provided\")\r\n\r\n        if current_running_type == \"bot\":\r\n            tweaks[\"current_running_bot\"] = current_runner_data\r\n        else:\r\n            tweaks[\"current_running_user\"] = current_runner_data\r\n\r\n    async def _request(\r\n        self,\r\n        path: str,\r\n        method: str,\r\n        params: dict,\r\n        tweaks: dict,\r\n    ):\r\n        url = urljoin(self.base_url, path)\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n\r\n        app_api_token = tweaks.get(\"app_api_token\", self.app_api_token)\r\n        if app_api_token:\r\n            headers[\"X-Api-Token\"] = app_api_token\r\n\r\n        if \"X-Api-Token\" not in headers:\r\n            return\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                request_method = getattr(client, method.lower())\r\n                res = await request_method(\r\n                    url, timeout=30, headers=headers, json=params\r\n                )\r\n                res.raise_for_status()\r\n            return res.json()\r\n        except Exception:\r\n            return\r\n\r\n    async def _is_valid_langboard_url(self, url: str) -> bool:\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                res = await client.get(url)\r\n                if res.status_code == HTTP_STATUS_OK:\r\n                    return True\r\n                elif res.status_code == HTTP_STATUS_NOT_FOUND:\r\n                    result = res.json()\r\n                    return \"detail\" in result\r\n                return False\r\n        except Exception:\r\n            return False\r\n\r\n    async def _get_apis(self, url: str) -> list[str]:\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                res = await client.get(urljoin(url, \"schema/api\"))\r\n                res.raise_for_status()\r\n                result = res.json()\r\n                return list(result.get(\"apis\", {}).keys())\r\n        except httpx.RequestError:\r\n            return []\r\n        except Exception:\r\n            return []\r\n\r\n    def _create_tool(self, api_name: str, schema: dict, local_vars) -> Tool:\r\n        request_schema_source: str = schema.get(\"request_schema_source\", \"\")\r\n        method: str = schema.get(\"method\")\r\n        path: str = schema.get(\"path\")\r\n        description: str = schema.get(\"description\")\r\n        content_type: str = schema.get(\"content_type\")\r\n        langboard_variables = local_vars.get(\"langboard_variables\", {})\r\n        if request_schema_source:\r\n            request_schema_source = self._remove_unnecessary_fields(\r\n                request_schema_source\r\n            )\r\n            exec(request_schema_source, local_vars)\r\n\r\n        def requests_process(**kwargs) -> str:\r\n            url = urljoin(\r\n                self.base_url, path.format(**{**kwargs, **langboard_variables})\r\n            )\r\n\r\n            headers = {\r\n                \"Content-Type\": content_type,\r\n            }\r\n\r\n            app_api_token = langboard_variables.get(\"app_api_token\", None)\r\n            if app_api_token:\r\n                headers[\"X-Api-Token\"] = app_api_token\r\n\r\n            if \"X-Api-Token\" not in headers or not headers[\"X-Api-Token\"]:\r\n                return {\"error\": \"API Token is required.\", \"status_code\": None}\r\n\r\n            query_params = {}\r\n            body_form = {}\r\n            if (\r\n                \"project_uid\" in langboard_variables\r\n                and langboard_variables[\"project_uid\"]\r\n            ):\r\n                query_params[\"project_uid\"] = langboard_variables[\"project_uid\"]\r\n\r\n            for key in kwargs:\r\n                converted_value = self._convert_api_schema(kwargs[key])\r\n\r\n                if (\r\n                    key == \"form_request_schemas\"\r\n                    and isinstance(converted_value, list)\r\n                    and api_name == \"batch_apis\"\r\n                ):\r\n                    converted_value = self._convert_batch_api_schema(\r\n                        converted_value, langboard_variables\r\n                    )\r\n\r\n                if key.startswith(\"query_\"):\r\n                    query_params[key.replace(\"query_\", \"\")] = converted_value\r\n                elif key.startswith(\"form_\"):\r\n                    body_form[key.replace(\"form_\", \"\")] = converted_value\r\n\r\n            try:\r\n                request_method = getattr(requests, method.lower())\r\n                response = request_method(\r\n                    url,\r\n                    timeout=30,\r\n                    headers=headers,\r\n                    params=query_params,\r\n                    json=body_form,\r\n                )\r\n                response.raise_for_status()\r\n                return response.content\r\n            except requests.exceptions.HTTPError:\r\n                text = None\r\n                try:\r\n                    text = response.text\r\n                except Exception:\r\n                    pass\r\n                try:\r\n                    error_message = response.json().get(\"message\", text)\r\n                except ValueError:\r\n                    error_message = response\r\n                return {\"error\": error_message, \"status_code\": response.status_code}\r\n            except requests.exceptions.RequestException as e:\r\n                return {\"error\": str(e), \"status_code\": None}\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=api_name,\r\n            description=description,\r\n            func=requests_process,\r\n            args_schema=local_vars.get(\"RequestForm\", None),\r\n        )\r\n\r\n        return tool\r\n\r\n    def _create_schema_tool(self, schemas: dict) -> Tool:\r\n        class SchemaToolInput(BaseModel):\r\n            api_names: str | list[str] = Field(\r\n                ..., description=\"The name(s) of the API(s) to get the schema for.\"\r\n            )\r\n\r\n        def get_schema(api_names: str | list[str]) -> dict:\r\n            if isinstance(api_names, str):\r\n                api_names = [api_names]\r\n            response = {}\r\n            for api_name in api_names:\r\n                schema = schemas.get(api_name, None)\r\n                if isinstance(schema, dict):\r\n                    response[api_name] = schema\r\n                else:\r\n                    response[api_name] = {\r\n                        \"error\": f\"Schema for API '{api_name}' not found.\"\r\n                    }\r\n            return schemas[api_name]\r\n\r\n        return StructuredTool.from_function(\r\n            name=\"get_api_schema\",\r\n            description=\"Get the schema of a specific API.\",\r\n            func=get_schema,\r\n            args_schema=SchemaToolInput,\r\n        )\r\n\r\n    def _remove_unnecessary_fields(self, schema_source: str) -> str:\r\n        lines = schema_source.splitlines()\r\n        removed_lines = []\r\n        for line_no in range(len(lines)):\r\n            line = lines[line_no]\r\n            if line.strip().startswith(\"project_uid\") or line.strip().startswith(\r\n                \"app_api_token\"\r\n            ):\r\n                continue\r\n            removed_lines.append(line)\r\n\r\n        new_lines = []\r\n        for line_no in range(len(removed_lines)):\r\n            line = removed_lines[line_no]\r\n            new_lines.append(line)\r\n            if not line.strip().startswith(\"class \"):\r\n                continue\r\n            next_line = (\r\n                removed_lines[line_no + 1] if line_no + 1 < len(removed_lines) else \"\"\r\n            )\r\n            if (\r\n                next_line.strip().startswith(\"class \")\r\n                or next_line.strip().startswith(\"def \")\r\n                or next_line.strip().startswith(\"from \")\r\n                or not next_line.strip()\r\n            ):\r\n                new_lines.append(\"    pass\")\r\n                break\r\n        return os.linesep.join(new_lines)\r\n\r\n    def _convert_api_schema(self, value: Any):\r\n        if isinstance(value, BaseModel):\r\n            return value.model_dump()\r\n        elif isinstance(value, datetime):\r\n            return str(value)\r\n        elif isinstance(value, Enum):\r\n            return value.value\r\n        return value\r\n\r\n    def _convert_batch_api_schema(self, value: list, langboard_variables: dict):\r\n        new_value = []\r\n        for item in value:\r\n            if isinstance(item, BaseModel):\r\n                item = self._convert_api_schema(item)\r\n\r\n            if not isinstance(item, dict):\r\n                continue\r\n\r\n            if \"path_or_api_name\" not in item:\r\n                continue\r\n\r\n            batch_form = {}\r\n            batch_query = {}\r\n            has_form = \"form\" in item and item[\"form\"]\r\n            has_query = \"query\" in item and item[\"query\"]\r\n            if has_form:\r\n                for k, v in item.get(\"form\", {}).items():\r\n                    v = self._convert_api_schema(v)\r\n                    if k.startswith(\"query_\"):\r\n                        batch_query[k.replace(\"query_\", \"\")] = v\r\n                    elif k.startswith(\"form_\"):\r\n                        batch_form[k.replace(\"form_\", \"\")] = v\r\n                    else:\r\n                        batch_form[k] = v\r\n\r\n            if has_query:\r\n                for k, v in item.get(\"query\", {}).items():\r\n                    v = self._convert_api_schema(v)\r\n                    if k.startswith(\"query_\"):\r\n                        batch_query[k.replace(\"query_\", \"\")] = v\r\n                    elif k.startswith(\"form_\"):\r\n                        batch_form[k.replace(\"form_\", \"\")] = v\r\n                    else:\r\n                        batch_query[k] = v\r\n\r\n            if has_form and batch_form:\r\n                item[\"form\"] = batch_form\r\n            if has_query and batch_query:\r\n                item[\"query\"] = batch_query\r\n            item[\"path_or_api_name\"] = item[\"path_or_api_name\"].format(\r\n                **{**batch_query, **batch_form, **langboard_variables}\r\n            )\r\n            if (\r\n                \"project_uid\" in langboard_variables\r\n                and langboard_variables[\"project_uid\"]\r\n            ):\r\n                if \"query\" not in item or not item[\"query\"]:\r\n                    item[\"query\"] = {}\r\n                item[\"query\"][\"project_uid\"] = langboard_variables[\"project_uid\"]\r\n            new_value.append(item)\r\n        return new_value\r\n"},"current_runner_data":{"_input_type":"NestedDictInput","advanced":false,"display_name":"Current Runner Data","dynamic":false,"info":"","list":false,"list_add_label":"Add More","name":"current_runner_data","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"NestedDict","value":{}},"current_runner_type":{"_input_type":"DropdownInput","advanced":false,"combobox":false,"dialog_inputs":{},"display_name":"Current Runner Type","dynamic":false,"info":"","name":"current_runner_type","options":["bot","user"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":""},"custom_markdown_formats":{"_input_type":"NestedDictInput","advanced":false,"display_name":"Custom Markdown Formats","dynamic":false,"info":"","list":false,"list_add_label":"Add More","name":"custom_markdown_formats","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"NestedDict","value":{}},"event":{"_input_type":"StrInput","advanced":false,"display_name":"Event","dynamic":false,"info":"","list":false,"list_add_label":"Add More","load_from_db":false,"name":"event","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":""},"files":{"_input_type":"HandleInput","advanced":false,"display_name":"Files","dynamic":false,"info":"","input_types":["Data"],"list":false,"list_add_label":"Add More","name":"files","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"is_called_by_langboard":{"_input_type":"BoolInput","advanced":true,"dynamic":false,"info":"","list":false,"list_add_label":"Add More","name":"is_called_by_langboard","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":false},"project_uid":{"_input_type":"StrInput","advanced":false,"display_name":"Project UID","dynamic":false,"info":"","list":false,"list_add_label":"Add More","load_from_db":false,"name":"project_uid","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":""},"rest_data":{"_input_type":"NestedDictInput","advanced":false,"display_name":"Rest Data","dynamic":false,"info":"","list":false,"list_add_label":"Add More","name":"rest_data","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"NestedDict","value":{}},"webhook":{"_input_type":"HandleInput","advanced":false,"display_name":"Webhook Input","dynamic":false,"info":"","input_types":["Data"],"list":false,"list_add_label":"Add More","name":"webhook","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""}},"tool_mode":false},"showNode":true,"type":"LangboardCalledVariablesComponent"},"id":"LangboardCalledVariablesComponent-fZmZu","measured":{"height":983,"width":320},"position":{"x":-757.1916350959848,"y":-148.58534253970134},"selected":false,"type":"genericNode"},{"data":{"id":"LangboardApiDefaultTriggerPromptsComponent-XPexk","node":{"base_classes":["LangboardApiDefaultTriggerPromptsComponent"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Langboard API Default Trigger Prompts Component","display_name":"Langboard API Default Trigger Prompts","documentation":"","edited":true,"field_order":["default_triggers","bot_project_assigned_prompt","bot_mentioned_prompt","bot_cron_scheduled_prompt"],"frozen":false,"legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Default Trigger Prompts","hidden":false,"method":"build_trigger_prompts","name":"default_trigger_prompts","options":null,"required_inputs":null,"selected":"LangboardApiDefaultTriggerPromptsComponent","tool_mode":true,"types":["LangboardApiDefaultTriggerPromptsComponent"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","bot_cron_scheduled_prompt":{"_input_type":"MultilineInput","advanced":false,"copy_field":false,"display_name":"Cron Scheduled Prompt","dynamic":false,"info":"Prompt for when scheduled cron job is triggered.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"bot_cron_scheduled_prompt","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"bot_mentioned_prompt":{"_input_type":"MultilineInput","advanced":false,"copy_field":false,"display_name":"Mentioned Prompt","dynamic":false,"info":"Prompt for when the bot is mentioned.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"bot_mentioned_prompt","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"You have been mentioned. Check 'mentioned_in' in the data and check the record according to the 'mentioned_in'. You must utilize 'custom_markdown_formats' in the data to parse formatted contents. Do action based on the record."},"bot_project_assigned_prompt":{"_input_type":"MultilineInput","advanced":false,"copy_field":false,"display_name":"Project Assigned Prompt","dynamic":false,"info":"Prompt for when a project is assigned.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"bot_project_assigned_prompt","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.custom import Component\r\nfrom langflow.io import MultilineInput, Output, StrInput\r\n\r\n\r\nBOT_PROJECT_ASSIGNED_EVENT = \"bot_project_assigned\"\r\nBOT_MENTIONED_EVENT = \"bot_mentioned\"\r\nBOT_CRON_SCHEDULED_EVENT = \"bot_cron_scheduled\"\r\n\r\n\r\nclass LangboardApiDefaultTriggerPromptsComponent(Component):\r\n    display_name = \"Langboard API Default Trigger Prompts\"\r\n    description = \"Langboard API Default Trigger Prompts Component\"\r\n    name = \"LangboardApiDefaultTriggerPromptsComponent\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"default_triggers\",\r\n            display_name=\"Default Triggers\",\r\n            info=\"Default triggers for the bot.\",\r\n            value=[\r\n                BOT_PROJECT_ASSIGNED_EVENT,\r\n                BOT_MENTIONED_EVENT,\r\n                BOT_CRON_SCHEDULED_EVENT,\r\n            ],\r\n            is_list=True,\r\n            advanced=True,\r\n            show=False,\r\n        ),\r\n        MultilineInput(\r\n            name=f\"{BOT_PROJECT_ASSIGNED_EVENT}_prompt\",\r\n            display_name=\"Project Assigned Prompt\",\r\n            info=\"Prompt for when a project is assigned.\",\r\n            value=\"\",\r\n        ),\r\n        MultilineInput(\r\n            name=f\"{BOT_MENTIONED_EVENT}_prompt\",\r\n            display_name=\"Mentioned Prompt\",\r\n            info=\"Prompt for when the bot is mentioned.\",\r\n            value=\"You have been mentioned. Check 'mentioned_in' in the data and check the record according to the 'mentioned_in'. You must utilize 'custom_markdown_formats' in the data to parse formatted contents. Do action based on the record.\",\r\n        ),\r\n        MultilineInput(\r\n            name=f\"{BOT_CRON_SCHEDULED_EVENT}_prompt\",\r\n            display_name=\"Cron Scheduled Prompt\",\r\n            info=\"Prompt for when scheduled cron job is triggered.\",\r\n            value=\"\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Default Trigger Prompts\",\r\n            name=\"default_trigger_prompts\",\r\n            method=\"build_trigger_prompts\",\r\n        ),\r\n    ]\r\n\r\n    def build_trigger_prompts(self) -> \"LangboardApiDefaultTriggerPromptsComponent\":\r\n        return self\r\n"},"default_triggers":{"_input_type":"StrInput","advanced":true,"display_name":"Default Triggers","dynamic":false,"info":"Default triggers for the bot.","list":true,"list_add_label":"Add More","load_from_db":false,"name":"default_triggers","placeholder":"","required":false,"show":false,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":["bot_project_assigned","bot_mentioned","bot_cron_scheduled"]}},"tool_mode":false},"showNode":true,"type":"LangboardApiDefaultTriggerPromptsComponent"},"id":"LangboardApiDefaultTriggerPromptsComponent-XPexk","measured":{"height":413,"width":320},"position":{"x":-309.539034595098,"y":-111.54852699491317},"selected":false,"type":"genericNode"},{"data":{"id":"Prompt-ub2Gs","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{"template":["current_date","prompt"]},"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","documentation":"","edited":false,"error":null,"field_order":["template","tool_placeholder"],"frozen":false,"full_path":null,"icon":"prompts","is_composition":null,"is_input":null,"is_output":null,"legacy":false,"metadata":{},"minimized":false,"name":"","output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Prompt Message","hidden":false,"method":"build_prompt","name":"prompt","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"priority":null,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"},"current_date":{"advanced":false,"display_name":"current_date","dynamic":false,"field_type":"str","fileTypes":[],"file_path":"","info":"","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"current_date","placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"prompt":{"advanced":false,"display_name":"prompt","dynamic":false,"field_type":"str","fileTypes":[],"file_path":"","info":"","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"prompt","placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"template":{"_input_type":"PromptInput","advanced":false,"display_name":"Template","dynamic":false,"info":"","list":false,"list_add_label":"Add More","name":"template","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"type":"prompt","value":"**Current time: {current_date}**\n**You must follow the markdown formats when you output the message or write descriptions (use `get_custom_markdown_formats`).**\n**DO NOT WRAP ANY CUSTOM MARKDOWN FORMATS BY CODE BLOCK**\n\n{prompt}"},"tool_placeholder":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Tool Placeholder","dynamic":false,"info":"A placeholder input for tool mode.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"tool_placeholder","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}},"tool_mode":false},"showNode":true,"type":"Prompt"},"id":"Prompt-ub2Gs","measured":{"height":493,"width":320},"position":{"x":-28.2163367383489,"y":1537.0455731119646},"selected":false,"type":"genericNode"},{"data":{"id":"ChatOutput-51Ihf","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Display a chat message in the Playground.","display_name":"Chat Output","documentation":"","edited":false,"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template","background_color","chat_icon","text_color","clean_data"],"frozen":false,"icon":"MessagesSquare","legacy":false,"metadata":{},"minimized":true,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","background_color":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Background Color","dynamic":false,"info":"The background color of the icon.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"background_color","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"chat_icon":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Icon","dynamic":false,"info":"The icon of the message.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"chat_icon","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"clean_data":{"_input_type":"BoolInput","advanced":true,"display_name":"Basic Clean Data","dynamic":false,"info":"Whether to clean the data","list":false,"list_add_label":"Add More","name":"clean_data","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":true},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"},"data_template":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Data Template","dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"data_template","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{text}"},"input_value":{"_input_type":"HandleInput","advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as output.","input_types":["Data","DataFrame","Message"],"list":false,"list_add_label":"Add More","name":"input_value","placeholder":"","required":true,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"sender":{"_input_type":"DropdownInput","advanced":true,"combobox":false,"dialog_inputs":{},"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":"Machine"},"sender_name":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"AI"},"session_id":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"_input_type":"BoolInput","advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"list_add_label":"Add More","name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":true},"text_color":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Text Color","dynamic":false,"info":"The text color of the name","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"text_color","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}},"tool_mode":false},"showNode":false,"type":"ChatOutput"},"dragging":false,"id":"ChatOutput-51Ihf","measured":{"height":66,"width":192},"position":{"x":1708.2588030645197,"y":944.2993112441078},"selected":false,"type":"genericNode"},{"data":{"id":"TimezoneComponent-u6FVU","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Use as a template to create your own component.","display_name":"Timezone","documentation":"https://docs.langflow.org/components-custom-components","edited":true,"field_order":["timezone"],"frozen":false,"icon":"code","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Output","hidden":false,"method":"build_output","name":"output","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"# from langflow.field_typing import Data\r\nfrom langflow.custom import Component\r\nfrom langflow.io import DropdownInput, Output\r\nfrom langflow.schema.message import Message\r\nfrom zoneinfo import ZoneInfo, available_timezones\r\n\r\n\r\nclass TimezoneComponent(Component):\r\n    display_name = \"Timezone\"\r\n    description = \"Use as a template to create your own component.\"\r\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\r\n    icon = \"code\"\r\n    name = \"TimezoneComponent\"\r\n\r\n    inputs = [\r\n        DropdownInput(\r\n            name=\"timezone\",\r\n            display_name=\"Timezone\",\r\n            options=list(available_timezones()),\r\n            value=\"UTC\",\r\n            info=\"Select the timezone to convert the date to.\",\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Message:\r\n        message = Message(text=self.timezone)\r\n        self.status = message\r\n        return message\r\n"},"timezone":{"_input_type":"DropdownInput","advanced":false,"combobox":false,"dialog_inputs":{},"display_name":"Timezone","dynamic":false,"info":"Select the timezone to convert the date to.","name":"timezone","options":["Etc/GMT+1","America/Rosario","Africa/Juba","Africa/Douala","Asia/Atyrau","America/Santiago","Australia/West","Pacific/Noumea","Europe/Chisinau","Etc/GMT+8","HST","America/Santo_Domingo","Indian/Maldives","Pacific/Galapagos","America/Goose_Bay","Asia/Tbilisi","Universal","Europe/Vaduz","Antarctica/Rothera","America/Indiana/Vincennes","America/Jamaica","Pacific/Fakaofo","Pacific/Honolulu","Australia/ACT","America/Boise","Etc/GMT-1","America/Virgin","US/Hawaii","America/Dawson","Pacific/Tongatapu","America/Manaus","Indian/Kerguelen","Europe/Rome","America/Porto_Acre","America/Ojinaga","Australia/Melbourne","Asia/Qyzylorda","Africa/Blantyre","Africa/Sao_Tome","America/Grand_Turk","America/Toronto","Etc/GMT+0","America/Paramaribo","Asia/Kashgar","America/Port_of_Spain","Navajo","America/Fort_Wayne","Asia/Baghdad","Pacific/Kiritimati","Etc/UCT","America/Barbados","Australia/Currie","America/Cordoba","Asia/Tehran","Indian/Cocos","America/Sao_Paulo","America/Inuvik","US/Eastern","Asia/Bahrain","Etc/GMT-6","Asia/Ulan_Bator","America/Winnipeg","Kwajalein","Etc/GMT-11","America/Punta_Arenas","Africa/Bissau","Atlantic/Reykjavik","America/Lima","Europe/Vilnius","Europe/Zagreb","Pacific/Pohnpei","Africa/Dar_es_Salaam","America/Rio_Branco","Europe/Warsaw","Etc/GMT+11","GMT","Europe/Isle_of_Man","Asia/Samarkand","Iran","Pacific/Majuro","Africa/Algiers","Etc/GMT-8","America/Resolute","Indian/Chagos","Etc/GMT-7","America/Antigua","Europe/Lisbon","America/Guatemala","Asia/Novosibirsk","America/Havana","Africa/Kampala","America/Santarem","Africa/Niamey","Asia/Aqtau","Turkey","America/Cayman","Asia/Karachi","Europe/Vienna","US/Alaska","Europe/Podgorica","Europe/Luxembourg","Europe/Guernsey","Pacific/Bougainville","Africa/Tripoli","Etc/GMT","America/Indiana/Knox","localtime","Etc/GMT+9","Asia/Chita","Africa/Accra","Africa/Asmera","America/Thule","Europe/Minsk","Australia/Canberra","America/Moncton","Europe/Oslo","Europe/Gibraltar","Atlantic/Canary","Asia/Magadan","Atlantic/Madeira","Asia/Vladivostok","Atlantic/Cape_Verde","Etc/GMT-9","America/Dawson_Creek","NZ","America/Argentina/Mendoza","America/Nuuk","Europe/Zaporozhye","Atlantic/Jan_Mayen","Asia/Manila","Asia/Beirut","Australia/NSW","Australia/Brisbane","America/Rainy_River","America/Nassau","Africa/Banjul","Egypt","Antarctica/Syowa","Europe/Malta","Europe/Budapest","Africa/Maputo","Africa/Porto-Novo","Africa/Luanda","America/Indiana/Indianapolis","Australia/Adelaide","Atlantic/St_Helena","Indian/Antananarivo","MST7MDT","America/Chicago","America/St_Vincent","Africa/Mogadishu","Asia/Baku","America/Caracas","Asia/Bangkok","America/Anguilla","America/St_Thomas","Africa/Ndjamena","Asia/Calcutta","Asia/Ho_Chi_Minh","Eire","Pacific/Easter","Asia/Muscat","America/Merida","Poland","Antarctica/Palmer","America/Jujuy","America/Recife","Australia/South","Asia/Katmandu","Etc/Greenwich","Europe/Andorra","Atlantic/Bermuda","Europe/Monaco","America/Cuiaba","Etc/GMT-0","Indian/Mauritius","Asia/Kuala_Lumpur","Europe/Busingen","Asia/Thimbu","Africa/Tunis","Africa/Libreville","US/Central","Pacific/Kosrae","America/Porto_Velho","Asia/Yerevan","Asia/Riyadh","America/Pangnirtung","Africa/Windhoek","Africa/Gaborone","Asia/Qatar","America/Tortola","Asia/Almaty","Asia/Bishkek","Asia/Ujung_Pandang","Etc/Zulu","Asia/Jerusalem","Asia/Taipei","America/Coral_Harbour","Europe/Amsterdam","America/Miquelon","Atlantic/South_Georgia","Europe/Belgrade","Etc/GMT-2","Africa/Mbabane","Etc/GMT-4","America/Los_Angeles","America/Argentina/Cordoba","Asia/Kolkata","Europe/Kaliningrad","Indian/Christmas","Europe/Zurich","Canada/Saskatchewan","EST5EDT","America/Detroit","Africa/Bamako","America/Bogota","Africa/Addis_Ababa","America/Aruba","America/Tijuana","Pacific/Marquesas","Hongkong","Chile/Continental","America/Scoresbysund","Pacific/Efate","Etc/GMT0","America/Montserrat","Europe/Stockholm","Pacific/Chuuk","America/Indiana/Tell_City","Asia/Irkutsk","Etc/GMT+6","America/Argentina/San_Juan","Factory","Pacific/Rarotonga","Canada/Newfoundland","Indian/Reunion","US/Arizona","America/Dominica","America/Indiana/Marengo","Asia/Tomsk","America/Marigot","Australia/Eucla","America/Port-au-Prince","Asia/Ulaanbaatar","America/Mendoza","NZ-CHAT","America/Blanc-Sablon","Africa/Cairo","Antarctica/Mawson","America/Fort_Nelson","ROC","America/Eirunepe","Europe/San_Marino","Asia/Jakarta","Indian/Mahe","ROK","Iceland","America/Argentina/Catamarca","Asia/Dacca","Etc/GMT-13","US/Samoa","Antarctica/Davis","Europe/Istanbul","Antarctica/Vostok","Asia/Macao","Mexico/BajaSur","Europe/Tiraspol","America/Louisville","Asia/Kabul","America/Boa_Vista","America/Asuncion","America/Halifax","Europe/Moscow","Etc/GMT+7","America/Puerto_Rico","America/Juneau","Mexico/BajaNorte","Zulu","UCT","Asia/Dubai","Europe/Astrakhan","Europe/Uzhgorod","Australia/Yancowinna","Arctic/Longyearbyen","America/Indiana/Vevay","America/Adak","Japan","Etc/GMT+12","Australia/Broken_Hill","Europe/Brussels","America/St_Johns","Etc/GMT+4","Africa/Bangui","Asia/Oral","Asia/Damascus","Pacific/Samoa","America/Argentina/Ushuaia","Antarctica/South_Pole","Pacific/Enderbury","Africa/Lome","America/Kralendijk","Mexico/General","America/St_Kitts","America/Panama","Jamaica","Europe/Copenhagen","America/Knox_IN","Pacific/Truk","Africa/Conakry","Pacific/Fiji","America/Montreal","Europe/Belfast","W-SU","America/Yellowknife","Asia/Dushanbe","America/La_Paz","America/Phoenix","Europe/Sofia","America/Indiana/Petersburg","Australia/Tasmania","America/Lower_Princes","Europe/Riga","Asia/Ashkhabad","Africa/Djibouti","America/Vancouver","Etc/GMT-5","America/Monterrey","PRC","America/Costa_Rica","Asia/Qostanay","Brazil/DeNoronha","Asia/Kamchatka","Europe/Vatican","Asia/Rangoon","Pacific/Port_Moresby","Asia/Aqtobe","Cuba","America/Hermosillo","America/Guyana","Europe/London","Asia/Nicosia","Asia/Yekaterinburg","America/Edmonton","Asia/Yangon","US/East-Indiana","America/Mazatlan","Asia/Amman","Asia/Srednekolymsk","Africa/Asmara","America/Cayenne","Africa/Abidjan","America/Whitehorse","America/Argentina/Rio_Gallegos","CET","US/Indiana-Starke","Europe/Ljubljana","Pacific/Wallis","America/Argentina/San_Luis","Pacific/Guam","Pacific/Palau","America/Martinique","Etc/GMT-3","America/Bahia_Banderas","America/Campo_Grande","America/Coyhaique","US/Aleutian","America/Argentina/Tucuman","Atlantic/Faroe","Pacific/Pitcairn","Europe/Skopje","America/Cambridge_Bay","America/Guayaquil","Europe/Paris","Asia/Ust-Nera","Atlantic/Stanley","Europe/Saratov","Asia/Colombo","America/North_Dakota/New_Salem","Asia/Kathmandu","Asia/Thimphu","EST","Pacific/Niue","America/Cancun","Asia/Hovd","Etc/GMT+3","Pacific/Funafuti","UTC","Asia/Singapore","Europe/Simferopol","Australia/Darwin","Pacific/Yap","US/Mountain","Pacific/Nauru","EET","Africa/Lusaka","Canada/Central","Asia/Kuching","America/Argentina/ComodRivadavia","Pacific/Norfolk","Pacific/Saipan","Africa/Ouagadougou","Africa/Ceuta","America/Yakutat","Asia/Seoul","America/Thunder_Bay","Indian/Mayotte","Africa/Lagos","Australia/Lindeman","Europe/Tirane","America/Kentucky/Monticello","Libya","Asia/Choibalsan","America/Indianapolis","America/Ciudad_Juarez","Africa/Monrovia","America/Belem","Africa/Freetown","America/Nome","Africa/Malabo","America/Argentina/Jujuy","Antarctica/McMurdo","America/Indiana/Winamac","America/Iqaluit","Asia/Urumqi","Etc/GMT+2","Pacific/Auckland","Brazil/East","Europe/Berlin","Europe/Prague","Africa/Khartoum","Asia/Macau","America/Metlakatla","Asia/Pontianak","Europe/Samara","America/Kentucky/Louisville","America/Atikokan","Asia/Phnom_Penh","America/North_Dakota/Center","Asia/Dhaka","Africa/Dakar","US/Pacific","Asia/Hebron","Chile/EasterIsland","America/Shiprock","Pacific/Kanton","America/Buenos_Aires","Asia/Vientiane","Africa/Brazzaville","Africa/Bujumbura","America/Argentina/Salta","Asia/Ashgabat","Asia/Saigon","Europe/Mariehamn","Brazil/Acre","Europe/Tallinn","America/Atka","Africa/Johannesburg","Pacific/Gambier","Atlantic/Faeroe","Pacific/Tahiti","America/Menominee","Israel","America/Nipigon","Etc/GMT-12","Asia/Jayapura","Europe/Dublin","Europe/Kyiv","America/North_Dakota/Beulah","America/Anchorage","Etc/GMT+10","Greenwich","America/St_Barthelemy","Pacific/Wake","America/Denver","Antarctica/Troll","Asia/Barnaul","America/Regina","Africa/Kigali","Europe/Helsinki","Atlantic/Azores","Australia/LHI","GMT0","America/Creston","Etc/GMT-14","America/Belize","America/Araguaina","Pacific/Guadalcanal","Australia/Victoria","Australia/North","Asia/Chongqing","America/Glace_Bay","Europe/Nicosia","Europe/Sarajevo","Europe/Ulyanovsk","America/Matamoros","Pacific/Chatham","CST6CDT","America/New_York","Europe/Kiev","GMT+0","Europe/Madrid","Asia/Aden","Pacific/Midway","Asia/Harbin","America/Rankin_Inlet","America/Chihuahua","America/Santa_Isabel","Canada/Atlantic","Canada/Yukon","Pacific/Kwajalein","Australia/Hobart","Etc/GMT+5","Asia/Hong_Kong","America/Guadeloupe","Antarctica/Macquarie","America/Godthab","MST","Asia/Tel_Aviv","Africa/Maseru","Indian/Comoro","America/Mexico_City","Asia/Pyongyang","Australia/Sydney","Etc/Universal","Africa/El_Aaiun","Asia/Novokuznetsk","Brazil/West","America/Danmarkshavn","Asia/Tokyo","Africa/Timbuktu","Europe/Bucharest","Europe/Kirov","America/Managua","Europe/Jersey","America/Ensenada","America/Sitka","Africa/Lubumbashi","Asia/Tashkent","Asia/Anadyr","Canada/Mountain","Asia/Brunei","America/Bahia","Asia/Kuwait","Antarctica/Casey","America/Catamarca","Asia/Khandyga","Asia/Makassar","Africa/Casablanca","Pacific/Ponape","America/St_Lucia","Asia/Krasnoyarsk","Antarctica/DumontDUrville","Australia/Perth","MET","America/Argentina/La_Rioja","America/Curacao","Etc/GMT-10","Asia/Chungking","Asia/Omsk","GMT-0","America/Noronha","Africa/Harare","America/El_Salvador","PST8PDT","America/Fortaleza","Etc/UTC","Pacific/Johnston","GB-Eire","US/Michigan","Europe/Athens","Australia/Lord_Howe","Europe/Volgograd","Asia/Istanbul","Australia/Queensland","America/Maceio","America/Tegucigalpa","Asia/Gaza","Pacific/Apia","Asia/Famagusta","America/Argentina/Buenos_Aires","Asia/Shanghai","America/Grenada","Canada/Eastern","Pacific/Pago_Pago","Singapore","WET","America/Swift_Current","Portugal","Africa/Kinshasa","Africa/Nairobi","Asia/Dili","GB","Asia/Sakhalin","America/Montevideo","Pacific/Tarawa","Asia/Yakutsk","Canada/Pacific","Africa/Nouakchott","Europe/Bratislava"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":true,"trace_as_metadata":true,"type":"str","value":"UTC"}},"tool_mode":false},"showNode":true,"type":"TimezoneComponent"},"id":"TimezoneComponent-u6FVU","measured":{"height":249,"width":320},"position":{"x":-1038.74762799206,"y":1466.9369287006862},"selected":false,"type":"genericNode"},{"data":{"id":"get_datetime-AmL5l","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Gets a date.","display_name":"Get Datetime","documentation":"","edited":true,"field_order":["use_message_input","timezone","timezone_text"],"frozen":false,"icon":"clock","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Message","hidden":false,"method":"build_message","name":"result","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from datetime import datetime\r\nfrom zoneinfo import ZoneInfo, available_timezones\r\nfrom langflow.custom import Component\r\nfrom langflow.schema.message import Message\r\nfrom langflow.io import DropdownInput, Output, BoolInput, MessageTextInput\r\nfrom pydantic import BaseModel, Field\r\n\r\n\r\nclass GetDatetimeComponent(Component):\r\n    display_name = \"Get Datetime\"\r\n    description = \"Gets a date.\"\r\n    icon = \"clock\"\r\n    name = \"get_datetime\"\r\n\r\n    inputs = [\r\n        BoolInput(\r\n            name=\"use_message_input\",\r\n            display_name=\"Use Message Input\",\r\n            info=\"If true, the tool will use the message input as the date to convert.\",\r\n            value=False,\r\n        ),\r\n        DropdownInput(\r\n            name=\"timezone\",\r\n            display_name=\"Timezone\",\r\n            options=list(available_timezones()),\r\n            value=\"UTC\",\r\n            info=\"Select the timezone to get the date to.\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"timezone_text\",\r\n            display_name=\"Timezone Text\",\r\n            info=\"The timezone to convert the date to. If not provided, the default timezone will be used.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"result\", method=\"build_message\"),\r\n    ]\r\n\r\n    def build_message(self) -> Message:\r\n        if self.use_message_input:\r\n            if not self.timezone_text or self.timezone not in available_timezones():\r\n                raise ValueError(f\"Invalid timezone provided: {self.timezone_text}.\")\r\n        else:\r\n            if not self.timezone or self.timezone not in available_timezones():\r\n                raise ValueError(f\"Invalid timezone: {self.timezone}.\")\r\n\r\n        timezone = self.timezone_text if self.use_message_input else self.timezone\r\n        return Message(text=str(datetime.now(ZoneInfo(timezone)).isoformat(timespec=\"milliseconds\").replace(\"+00:00\", \"Z\")))\r\n"},"timezone":{"_input_type":"DropdownInput","advanced":false,"combobox":false,"dialog_inputs":{},"display_name":"Timezone","dynamic":false,"info":"Select the timezone to get the date to.","name":"timezone","options":["Etc/GMT+1","America/Rosario","Africa/Juba","Africa/Douala","Asia/Atyrau","America/Santiago","Australia/West","Pacific/Noumea","Europe/Chisinau","Etc/GMT+8","HST","America/Santo_Domingo","Indian/Maldives","Pacific/Galapagos","America/Goose_Bay","Asia/Tbilisi","Universal","Europe/Vaduz","Antarctica/Rothera","America/Indiana/Vincennes","America/Jamaica","Pacific/Fakaofo","Pacific/Honolulu","Australia/ACT","America/Boise","Etc/GMT-1","America/Virgin","US/Hawaii","America/Dawson","Pacific/Tongatapu","America/Manaus","Indian/Kerguelen","Europe/Rome","America/Porto_Acre","America/Ojinaga","Australia/Melbourne","Asia/Qyzylorda","Africa/Blantyre","Africa/Sao_Tome","America/Grand_Turk","America/Toronto","Etc/GMT+0","America/Paramaribo","Asia/Kashgar","America/Port_of_Spain","Navajo","America/Fort_Wayne","Asia/Baghdad","Pacific/Kiritimati","Etc/UCT","America/Barbados","Australia/Currie","America/Cordoba","Asia/Tehran","Indian/Cocos","America/Sao_Paulo","America/Inuvik","US/Eastern","Asia/Bahrain","Etc/GMT-6","Asia/Ulan_Bator","America/Winnipeg","Kwajalein","Etc/GMT-11","America/Punta_Arenas","Africa/Bissau","Atlantic/Reykjavik","America/Lima","Europe/Vilnius","Europe/Zagreb","Pacific/Pohnpei","Africa/Dar_es_Salaam","America/Rio_Branco","Europe/Warsaw","Etc/GMT+11","GMT","Europe/Isle_of_Man","Asia/Samarkand","Iran","Pacific/Majuro","Africa/Algiers","Etc/GMT-8","America/Resolute","Indian/Chagos","Etc/GMT-7","America/Antigua","Europe/Lisbon","America/Guatemala","Asia/Novosibirsk","America/Havana","Africa/Kampala","America/Santarem","Africa/Niamey","Asia/Aqtau","Turkey","America/Cayman","Asia/Karachi","Europe/Vienna","US/Alaska","Europe/Podgorica","Europe/Luxembourg","Europe/Guernsey","Pacific/Bougainville","Africa/Tripoli","Etc/GMT","America/Indiana/Knox","localtime","Etc/GMT+9","Asia/Chita","Africa/Accra","Africa/Asmera","America/Thule","Europe/Minsk","Australia/Canberra","America/Moncton","Europe/Oslo","Europe/Gibraltar","Atlantic/Canary","Asia/Magadan","Atlantic/Madeira","Asia/Vladivostok","Atlantic/Cape_Verde","Etc/GMT-9","America/Dawson_Creek","NZ","America/Argentina/Mendoza","America/Nuuk","Europe/Zaporozhye","Atlantic/Jan_Mayen","Asia/Manila","Asia/Beirut","Australia/NSW","Australia/Brisbane","America/Rainy_River","America/Nassau","Africa/Banjul","Egypt","Antarctica/Syowa","Europe/Malta","Europe/Budapest","Africa/Maputo","Africa/Porto-Novo","Africa/Luanda","America/Indiana/Indianapolis","Australia/Adelaide","Atlantic/St_Helena","Indian/Antananarivo","MST7MDT","America/Chicago","America/St_Vincent","Africa/Mogadishu","Asia/Baku","America/Caracas","Asia/Bangkok","America/Anguilla","America/St_Thomas","Africa/Ndjamena","Asia/Calcutta","Asia/Ho_Chi_Minh","Eire","Pacific/Easter","Asia/Muscat","America/Merida","Poland","Antarctica/Palmer","America/Jujuy","America/Recife","Australia/South","Asia/Katmandu","Etc/Greenwich","Europe/Andorra","Atlantic/Bermuda","Europe/Monaco","America/Cuiaba","Etc/GMT-0","Indian/Mauritius","Asia/Kuala_Lumpur","Europe/Busingen","Asia/Thimbu","Africa/Tunis","Africa/Libreville","US/Central","Pacific/Kosrae","America/Porto_Velho","Asia/Yerevan","Asia/Riyadh","America/Pangnirtung","Africa/Windhoek","Africa/Gaborone","Asia/Qatar","America/Tortola","Asia/Almaty","Asia/Bishkek","Asia/Ujung_Pandang","Etc/Zulu","Asia/Jerusalem","Asia/Taipei","America/Coral_Harbour","Europe/Amsterdam","America/Miquelon","Atlantic/South_Georgia","Europe/Belgrade","Etc/GMT-2","Africa/Mbabane","Etc/GMT-4","America/Los_Angeles","America/Argentina/Cordoba","Asia/Kolkata","Europe/Kaliningrad","Indian/Christmas","Europe/Zurich","Canada/Saskatchewan","EST5EDT","America/Detroit","Africa/Bamako","America/Bogota","Africa/Addis_Ababa","America/Aruba","America/Tijuana","Pacific/Marquesas","Hongkong","Chile/Continental","America/Scoresbysund","Pacific/Efate","Etc/GMT0","America/Montserrat","Europe/Stockholm","Pacific/Chuuk","America/Indiana/Tell_City","Asia/Irkutsk","Etc/GMT+6","America/Argentina/San_Juan","Factory","Pacific/Rarotonga","Canada/Newfoundland","Indian/Reunion","US/Arizona","America/Dominica","America/Indiana/Marengo","Asia/Tomsk","America/Marigot","Australia/Eucla","America/Port-au-Prince","Asia/Ulaanbaatar","America/Mendoza","NZ-CHAT","America/Blanc-Sablon","Africa/Cairo","Antarctica/Mawson","America/Fort_Nelson","ROC","America/Eirunepe","Europe/San_Marino","Asia/Jakarta","Indian/Mahe","ROK","Iceland","America/Argentina/Catamarca","Asia/Dacca","Etc/GMT-13","US/Samoa","Antarctica/Davis","Europe/Istanbul","Antarctica/Vostok","Asia/Macao","Mexico/BajaSur","Europe/Tiraspol","America/Louisville","Asia/Kabul","America/Boa_Vista","America/Asuncion","America/Halifax","Europe/Moscow","Etc/GMT+7","America/Puerto_Rico","America/Juneau","Mexico/BajaNorte","Zulu","UCT","Asia/Dubai","Europe/Astrakhan","Europe/Uzhgorod","Australia/Yancowinna","Arctic/Longyearbyen","America/Indiana/Vevay","America/Adak","Japan","Etc/GMT+12","Australia/Broken_Hill","Europe/Brussels","America/St_Johns","Etc/GMT+4","Africa/Bangui","Asia/Oral","Asia/Damascus","Pacific/Samoa","America/Argentina/Ushuaia","Antarctica/South_Pole","Pacific/Enderbury","Africa/Lome","America/Kralendijk","Mexico/General","America/St_Kitts","America/Panama","Jamaica","Europe/Copenhagen","America/Knox_IN","Pacific/Truk","Africa/Conakry","Pacific/Fiji","America/Montreal","Europe/Belfast","W-SU","America/Yellowknife","Asia/Dushanbe","America/La_Paz","America/Phoenix","Europe/Sofia","America/Indiana/Petersburg","Australia/Tasmania","America/Lower_Princes","Europe/Riga","Asia/Ashkhabad","Africa/Djibouti","America/Vancouver","Etc/GMT-5","America/Monterrey","PRC","America/Costa_Rica","Asia/Qostanay","Brazil/DeNoronha","Asia/Kamchatka","Europe/Vatican","Asia/Rangoon","Pacific/Port_Moresby","Asia/Aqtobe","Cuba","America/Hermosillo","America/Guyana","Europe/London","Asia/Nicosia","Asia/Yekaterinburg","America/Edmonton","Asia/Yangon","US/East-Indiana","America/Mazatlan","Asia/Amman","Asia/Srednekolymsk","Africa/Asmara","America/Cayenne","Africa/Abidjan","America/Whitehorse","America/Argentina/Rio_Gallegos","CET","US/Indiana-Starke","Europe/Ljubljana","Pacific/Wallis","America/Argentina/San_Luis","Pacific/Guam","Pacific/Palau","America/Martinique","Etc/GMT-3","America/Bahia_Banderas","America/Campo_Grande","America/Coyhaique","US/Aleutian","America/Argentina/Tucuman","Atlantic/Faroe","Pacific/Pitcairn","Europe/Skopje","America/Cambridge_Bay","America/Guayaquil","Europe/Paris","Asia/Ust-Nera","Atlantic/Stanley","Europe/Saratov","Asia/Colombo","America/North_Dakota/New_Salem","Asia/Kathmandu","Asia/Thimphu","EST","Pacific/Niue","America/Cancun","Asia/Hovd","Etc/GMT+3","Pacific/Funafuti","UTC","Asia/Singapore","Europe/Simferopol","Australia/Darwin","Pacific/Yap","US/Mountain","Pacific/Nauru","EET","Africa/Lusaka","Canada/Central","Asia/Kuching","America/Argentina/ComodRivadavia","Pacific/Norfolk","Pacific/Saipan","Africa/Ouagadougou","Africa/Ceuta","America/Yakutat","Asia/Seoul","America/Thunder_Bay","Indian/Mayotte","Africa/Lagos","Australia/Lindeman","Europe/Tirane","America/Kentucky/Monticello","Libya","Asia/Choibalsan","America/Indianapolis","America/Ciudad_Juarez","Africa/Monrovia","America/Belem","Africa/Freetown","America/Nome","Africa/Malabo","America/Argentina/Jujuy","Antarctica/McMurdo","America/Indiana/Winamac","America/Iqaluit","Asia/Urumqi","Etc/GMT+2","Pacific/Auckland","Brazil/East","Europe/Berlin","Europe/Prague","Africa/Khartoum","Asia/Macau","America/Metlakatla","Asia/Pontianak","Europe/Samara","America/Kentucky/Louisville","America/Atikokan","Asia/Phnom_Penh","America/North_Dakota/Center","Asia/Dhaka","Africa/Dakar","US/Pacific","Asia/Hebron","Chile/EasterIsland","America/Shiprock","Pacific/Kanton","America/Buenos_Aires","Asia/Vientiane","Africa/Brazzaville","Africa/Bujumbura","America/Argentina/Salta","Asia/Ashgabat","Asia/Saigon","Europe/Mariehamn","Brazil/Acre","Europe/Tallinn","America/Atka","Africa/Johannesburg","Pacific/Gambier","Atlantic/Faeroe","Pacific/Tahiti","America/Menominee","Israel","America/Nipigon","Etc/GMT-12","Asia/Jayapura","Europe/Dublin","Europe/Kyiv","America/North_Dakota/Beulah","America/Anchorage","Etc/GMT+10","Greenwich","America/St_Barthelemy","Pacific/Wake","America/Denver","Antarctica/Troll","Asia/Barnaul","America/Regina","Africa/Kigali","Europe/Helsinki","Atlantic/Azores","Australia/LHI","GMT0","America/Creston","Etc/GMT-14","America/Belize","America/Araguaina","Pacific/Guadalcanal","Australia/Victoria","Australia/North","Asia/Chongqing","America/Glace_Bay","Europe/Nicosia","Europe/Sarajevo","Europe/Ulyanovsk","America/Matamoros","Pacific/Chatham","CST6CDT","America/New_York","Europe/Kiev","GMT+0","Europe/Madrid","Asia/Aden","Pacific/Midway","Asia/Harbin","America/Rankin_Inlet","America/Chihuahua","America/Santa_Isabel","Canada/Atlantic","Canada/Yukon","Pacific/Kwajalein","Australia/Hobart","Etc/GMT+5","Asia/Hong_Kong","America/Guadeloupe","Antarctica/Macquarie","America/Godthab","MST","Asia/Tel_Aviv","Africa/Maseru","Indian/Comoro","America/Mexico_City","Asia/Pyongyang","Australia/Sydney","Etc/Universal","Africa/El_Aaiun","Asia/Novokuznetsk","Brazil/West","America/Danmarkshavn","Asia/Tokyo","Africa/Timbuktu","Europe/Bucharest","Europe/Kirov","America/Managua","Europe/Jersey","America/Ensenada","America/Sitka","Africa/Lubumbashi","Asia/Tashkent","Asia/Anadyr","Canada/Mountain","Asia/Brunei","America/Bahia","Asia/Kuwait","Antarctica/Casey","America/Catamarca","Asia/Khandyga","Asia/Makassar","Africa/Casablanca","Pacific/Ponape","America/St_Lucia","Asia/Krasnoyarsk","Antarctica/DumontDUrville","Australia/Perth","MET","America/Argentina/La_Rioja","America/Curacao","Etc/GMT-10","Asia/Chungking","Asia/Omsk","GMT-0","America/Noronha","Africa/Harare","America/El_Salvador","PST8PDT","America/Fortaleza","Etc/UTC","Pacific/Johnston","GB-Eire","US/Michigan","Europe/Athens","Australia/Lord_Howe","Europe/Volgograd","Asia/Istanbul","Australia/Queensland","America/Maceio","America/Tegucigalpa","Asia/Gaza","Pacific/Apia","Asia/Famagusta","America/Argentina/Buenos_Aires","Asia/Shanghai","America/Grenada","Canada/Eastern","Pacific/Pago_Pago","Singapore","WET","America/Swift_Current","Portugal","Africa/Kinshasa","Africa/Nairobi","Asia/Dili","GB","Asia/Sakhalin","America/Montevideo","Pacific/Tarawa","Asia/Yakutsk","Canada/Pacific","Africa/Nouakchott","Europe/Bratislava"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":true,"trace_as_metadata":true,"type":"str","value":"UTC"},"timezone_text":{"_input_type":"MessageTextInput","advanced":false,"display_name":"Timezone Text","dynamic":false,"info":"The timezone to convert the date to. If not provided, the default timezone will be used.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"timezone_text","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"use_message_input":{"_input_type":"BoolInput","advanced":false,"display_name":"Use Message Input","dynamic":false,"info":"If true, the tool will use the message input as the date to convert.","list":false,"list_add_label":"Add More","name":"use_message_input","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":false}},"tool_mode":false},"showNode":true,"type":"get_datetime"},"id":"get_datetime-AmL5l","measured":{"height":353,"width":320},"position":{"x":-549.3189398591601,"y":1616.2114349355877},"selected":false,"type":"genericNode"},{"data":{"id":"convert_timezone_tool-o0Rhd","node":{"base_classes":["Tool"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Converts a date from one timezone to another.","display_name":"Convert Timezone Tool","documentation":"","edited":true,"field_order":["use_message_input","timezone","timezone_text"],"frozen":false,"icon":"clock","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Tool","hidden":false,"method":"build_tool","name":"converted_date","options":null,"required_inputs":null,"selected":"Tool","tool_mode":true,"types":["Tool"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from datetime import datetime\r\nfrom zoneinfo import ZoneInfo, available_timezones\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.io import DropdownInput, Output, BoolInput, MessageTextInput\r\nfrom langchain_core.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\n\r\nclass ConvertTimezoneToolComponent(LCToolComponent):\r\n    display_name = \"Convert Timezone Tool\"\r\n    description = \"Converts a date from one timezone to another.\"\r\n    icon = \"clock\"\r\n    name = \"convert_timezone_tool\"\r\n\r\n    inputs = [\r\n        BoolInput(\r\n            name=\"use_message_input\",\r\n            display_name=\"Use Message Input\",\r\n            info=\"If true, the tool will use the message input as the date to convert.\",\r\n            value=False,\r\n        ),\r\n        DropdownInput(\r\n            name=\"timezone\",\r\n            display_name=\"Timezone\",\r\n            options=list(available_timezones()),\r\n            value=\"UTC\",\r\n            info=\"Select the timezone to convert the date to.\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"timezone_text\",\r\n            display_name=\"Timezone Text\",\r\n            info=\"The timezone to convert the date to. If not provided, the default timezone will be used.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Tool\", name=\"converted_date\", method=\"build_tool\"),\r\n    ]\r\n\r\n    def build_tool(self) -> Tool:\r\n        if self.use_message_input:\r\n            if not self.timezone_text or self.timezone not in available_timezones():\r\n                raise ValueError(f\"Invalid timezone provided: {self.timezone_text}.\")\r\n        else:\r\n            if not self.timezone or self.timezone not in available_timezones():\r\n                raise ValueError(f\"Invalid timezone: {self.timezone}.\")\r\n\r\n        class ConvertTimezoneInput(BaseModel):\r\n            date: str = Field(title=\"Date\", description=\"The iso format of date to convert.\")\r\n\r\n        def convert_timezone(date: str) -> str:\r\n            timezone = self.timezone_text if self.use_message_input else self.timezone\r\n            try:\r\n                old_date = datetime.fromisoformat(date)\r\n                if old_date.tzinfo is None:\r\n                    raise ValueError(\"Date must be timezone-aware.\")\r\n            except Exception:\r\n                return \"Invalid date format. Please provide a valid ISO format date.\"\r\n            \r\n            new_date = old_date.astimezone(ZoneInfo(timezone))\r\n            return new_date.isoformat(timespec=\"milliseconds\").replace(\"+00:00\", \"Z\")\r\n\r\n        return StructuredTool(\r\n            name=\"convert_timezone\",\r\n            description=\"Converts a date from one timezone to another.\",\r\n            args_schema=ConvertTimezoneInput,\r\n            func=convert_timezone,\r\n        )"},"timezone":{"_input_type":"DropdownInput","advanced":false,"combobox":false,"dialog_inputs":{},"display_name":"Timezone","dynamic":false,"info":"Select the timezone to convert the date to.","name":"timezone","options":["Etc/GMT+1","America/Rosario","Africa/Juba","Africa/Douala","Asia/Atyrau","America/Santiago","Australia/West","Pacific/Noumea","Europe/Chisinau","Etc/GMT+8","HST","America/Santo_Domingo","Indian/Maldives","Pacific/Galapagos","America/Goose_Bay","Asia/Tbilisi","Universal","Europe/Vaduz","Antarctica/Rothera","America/Indiana/Vincennes","America/Jamaica","Pacific/Fakaofo","Pacific/Honolulu","Australia/ACT","America/Boise","Etc/GMT-1","America/Virgin","US/Hawaii","America/Dawson","Pacific/Tongatapu","America/Manaus","Indian/Kerguelen","Europe/Rome","America/Porto_Acre","America/Ojinaga","Australia/Melbourne","Asia/Qyzylorda","Africa/Blantyre","Africa/Sao_Tome","America/Grand_Turk","America/Toronto","Etc/GMT+0","America/Paramaribo","Asia/Kashgar","America/Port_of_Spain","Navajo","America/Fort_Wayne","Asia/Baghdad","Pacific/Kiritimati","Etc/UCT","America/Barbados","Australia/Currie","America/Cordoba","Asia/Tehran","Indian/Cocos","America/Sao_Paulo","America/Inuvik","US/Eastern","Asia/Bahrain","Etc/GMT-6","Asia/Ulan_Bator","America/Winnipeg","Kwajalein","Etc/GMT-11","America/Punta_Arenas","Africa/Bissau","Atlantic/Reykjavik","America/Lima","Europe/Vilnius","Europe/Zagreb","Pacific/Pohnpei","Africa/Dar_es_Salaam","America/Rio_Branco","Europe/Warsaw","Etc/GMT+11","GMT","Europe/Isle_of_Man","Asia/Samarkand","Iran","Pacific/Majuro","Africa/Algiers","Etc/GMT-8","America/Resolute","Indian/Chagos","Etc/GMT-7","America/Antigua","Europe/Lisbon","America/Guatemala","Asia/Novosibirsk","America/Havana","Africa/Kampala","America/Santarem","Africa/Niamey","Asia/Aqtau","Turkey","America/Cayman","Asia/Karachi","Europe/Vienna","US/Alaska","Europe/Podgorica","Europe/Luxembourg","Europe/Guernsey","Pacific/Bougainville","Africa/Tripoli","Etc/GMT","America/Indiana/Knox","localtime","Etc/GMT+9","Asia/Chita","Africa/Accra","Africa/Asmera","America/Thule","Europe/Minsk","Australia/Canberra","America/Moncton","Europe/Oslo","Europe/Gibraltar","Atlantic/Canary","Asia/Magadan","Atlantic/Madeira","Asia/Vladivostok","Atlantic/Cape_Verde","Etc/GMT-9","America/Dawson_Creek","NZ","America/Argentina/Mendoza","America/Nuuk","Europe/Zaporozhye","Atlantic/Jan_Mayen","Asia/Manila","Asia/Beirut","Australia/NSW","Australia/Brisbane","America/Rainy_River","America/Nassau","Africa/Banjul","Egypt","Antarctica/Syowa","Europe/Malta","Europe/Budapest","Africa/Maputo","Africa/Porto-Novo","Africa/Luanda","America/Indiana/Indianapolis","Australia/Adelaide","Atlantic/St_Helena","Indian/Antananarivo","MST7MDT","America/Chicago","America/St_Vincent","Africa/Mogadishu","Asia/Baku","America/Caracas","Asia/Bangkok","America/Anguilla","America/St_Thomas","Africa/Ndjamena","Asia/Calcutta","Asia/Ho_Chi_Minh","Eire","Pacific/Easter","Asia/Muscat","America/Merida","Poland","Antarctica/Palmer","America/Jujuy","America/Recife","Australia/South","Asia/Katmandu","Etc/Greenwich","Europe/Andorra","Atlantic/Bermuda","Europe/Monaco","America/Cuiaba","Etc/GMT-0","Indian/Mauritius","Asia/Kuala_Lumpur","Europe/Busingen","Asia/Thimbu","Africa/Tunis","Africa/Libreville","US/Central","Pacific/Kosrae","America/Porto_Velho","Asia/Yerevan","Asia/Riyadh","America/Pangnirtung","Africa/Windhoek","Africa/Gaborone","Asia/Qatar","America/Tortola","Asia/Almaty","Asia/Bishkek","Asia/Ujung_Pandang","Etc/Zulu","Asia/Jerusalem","Asia/Taipei","America/Coral_Harbour","Europe/Amsterdam","America/Miquelon","Atlantic/South_Georgia","Europe/Belgrade","Etc/GMT-2","Africa/Mbabane","Etc/GMT-4","America/Los_Angeles","America/Argentina/Cordoba","Asia/Kolkata","Europe/Kaliningrad","Indian/Christmas","Europe/Zurich","Canada/Saskatchewan","EST5EDT","America/Detroit","Africa/Bamako","America/Bogota","Africa/Addis_Ababa","America/Aruba","America/Tijuana","Pacific/Marquesas","Hongkong","Chile/Continental","America/Scoresbysund","Pacific/Efate","Etc/GMT0","America/Montserrat","Europe/Stockholm","Pacific/Chuuk","America/Indiana/Tell_City","Asia/Irkutsk","Etc/GMT+6","America/Argentina/San_Juan","Factory","Pacific/Rarotonga","Canada/Newfoundland","Indian/Reunion","US/Arizona","America/Dominica","America/Indiana/Marengo","Asia/Tomsk","America/Marigot","Australia/Eucla","America/Port-au-Prince","Asia/Ulaanbaatar","America/Mendoza","NZ-CHAT","America/Blanc-Sablon","Africa/Cairo","Antarctica/Mawson","America/Fort_Nelson","ROC","America/Eirunepe","Europe/San_Marino","Asia/Jakarta","Indian/Mahe","ROK","Iceland","America/Argentina/Catamarca","Asia/Dacca","Etc/GMT-13","US/Samoa","Antarctica/Davis","Europe/Istanbul","Antarctica/Vostok","Asia/Macao","Mexico/BajaSur","Europe/Tiraspol","America/Louisville","Asia/Kabul","America/Boa_Vista","America/Asuncion","America/Halifax","Europe/Moscow","Etc/GMT+7","America/Puerto_Rico","America/Juneau","Mexico/BajaNorte","Zulu","UCT","Asia/Dubai","Europe/Astrakhan","Europe/Uzhgorod","Australia/Yancowinna","Arctic/Longyearbyen","America/Indiana/Vevay","America/Adak","Japan","Etc/GMT+12","Australia/Broken_Hill","Europe/Brussels","America/St_Johns","Etc/GMT+4","Africa/Bangui","Asia/Oral","Asia/Damascus","Pacific/Samoa","America/Argentina/Ushuaia","Antarctica/South_Pole","Pacific/Enderbury","Africa/Lome","America/Kralendijk","Mexico/General","America/St_Kitts","America/Panama","Jamaica","Europe/Copenhagen","America/Knox_IN","Pacific/Truk","Africa/Conakry","Pacific/Fiji","America/Montreal","Europe/Belfast","W-SU","America/Yellowknife","Asia/Dushanbe","America/La_Paz","America/Phoenix","Europe/Sofia","America/Indiana/Petersburg","Australia/Tasmania","America/Lower_Princes","Europe/Riga","Asia/Ashkhabad","Africa/Djibouti","America/Vancouver","Etc/GMT-5","America/Monterrey","PRC","America/Costa_Rica","Asia/Qostanay","Brazil/DeNoronha","Asia/Kamchatka","Europe/Vatican","Asia/Rangoon","Pacific/Port_Moresby","Asia/Aqtobe","Cuba","America/Hermosillo","America/Guyana","Europe/London","Asia/Nicosia","Asia/Yekaterinburg","America/Edmonton","Asia/Yangon","US/East-Indiana","America/Mazatlan","Asia/Amman","Asia/Srednekolymsk","Africa/Asmara","America/Cayenne","Africa/Abidjan","America/Whitehorse","America/Argentina/Rio_Gallegos","CET","US/Indiana-Starke","Europe/Ljubljana","Pacific/Wallis","America/Argentina/San_Luis","Pacific/Guam","Pacific/Palau","America/Martinique","Etc/GMT-3","America/Bahia_Banderas","America/Campo_Grande","America/Coyhaique","US/Aleutian","America/Argentina/Tucuman","Atlantic/Faroe","Pacific/Pitcairn","Europe/Skopje","America/Cambridge_Bay","America/Guayaquil","Europe/Paris","Asia/Ust-Nera","Atlantic/Stanley","Europe/Saratov","Asia/Colombo","America/North_Dakota/New_Salem","Asia/Kathmandu","Asia/Thimphu","EST","Pacific/Niue","America/Cancun","Asia/Hovd","Etc/GMT+3","Pacific/Funafuti","UTC","Asia/Singapore","Europe/Simferopol","Australia/Darwin","Pacific/Yap","US/Mountain","Pacific/Nauru","EET","Africa/Lusaka","Canada/Central","Asia/Kuching","America/Argentina/ComodRivadavia","Pacific/Norfolk","Pacific/Saipan","Africa/Ouagadougou","Africa/Ceuta","America/Yakutat","Asia/Seoul","America/Thunder_Bay","Indian/Mayotte","Africa/Lagos","Australia/Lindeman","Europe/Tirane","America/Kentucky/Monticello","Libya","Asia/Choibalsan","America/Indianapolis","America/Ciudad_Juarez","Africa/Monrovia","America/Belem","Africa/Freetown","America/Nome","Africa/Malabo","America/Argentina/Jujuy","Antarctica/McMurdo","America/Indiana/Winamac","America/Iqaluit","Asia/Urumqi","Etc/GMT+2","Pacific/Auckland","Brazil/East","Europe/Berlin","Europe/Prague","Africa/Khartoum","Asia/Macau","America/Metlakatla","Asia/Pontianak","Europe/Samara","America/Kentucky/Louisville","America/Atikokan","Asia/Phnom_Penh","America/North_Dakota/Center","Asia/Dhaka","Africa/Dakar","US/Pacific","Asia/Hebron","Chile/EasterIsland","America/Shiprock","Pacific/Kanton","America/Buenos_Aires","Asia/Vientiane","Africa/Brazzaville","Africa/Bujumbura","America/Argentina/Salta","Asia/Ashgabat","Asia/Saigon","Europe/Mariehamn","Brazil/Acre","Europe/Tallinn","America/Atka","Africa/Johannesburg","Pacific/Gambier","Atlantic/Faeroe","Pacific/Tahiti","America/Menominee","Israel","America/Nipigon","Etc/GMT-12","Asia/Jayapura","Europe/Dublin","Europe/Kyiv","America/North_Dakota/Beulah","America/Anchorage","Etc/GMT+10","Greenwich","America/St_Barthelemy","Pacific/Wake","America/Denver","Antarctica/Troll","Asia/Barnaul","America/Regina","Africa/Kigali","Europe/Helsinki","Atlantic/Azores","Australia/LHI","GMT0","America/Creston","Etc/GMT-14","America/Belize","America/Araguaina","Pacific/Guadalcanal","Australia/Victoria","Australia/North","Asia/Chongqing","America/Glace_Bay","Europe/Nicosia","Europe/Sarajevo","Europe/Ulyanovsk","America/Matamoros","Pacific/Chatham","CST6CDT","America/New_York","Europe/Kiev","GMT+0","Europe/Madrid","Asia/Aden","Pacific/Midway","Asia/Harbin","America/Rankin_Inlet","America/Chihuahua","America/Santa_Isabel","Canada/Atlantic","Canada/Yukon","Pacific/Kwajalein","Australia/Hobart","Etc/GMT+5","Asia/Hong_Kong","America/Guadeloupe","Antarctica/Macquarie","America/Godthab","MST","Asia/Tel_Aviv","Africa/Maseru","Indian/Comoro","America/Mexico_City","Asia/Pyongyang","Australia/Sydney","Etc/Universal","Africa/El_Aaiun","Asia/Novokuznetsk","Brazil/West","America/Danmarkshavn","Asia/Tokyo","Africa/Timbuktu","Europe/Bucharest","Europe/Kirov","America/Managua","Europe/Jersey","America/Ensenada","America/Sitka","Africa/Lubumbashi","Asia/Tashkent","Asia/Anadyr","Canada/Mountain","Asia/Brunei","America/Bahia","Asia/Kuwait","Antarctica/Casey","America/Catamarca","Asia/Khandyga","Asia/Makassar","Africa/Casablanca","Pacific/Ponape","America/St_Lucia","Asia/Krasnoyarsk","Antarctica/DumontDUrville","Australia/Perth","MET","America/Argentina/La_Rioja","America/Curacao","Etc/GMT-10","Asia/Chungking","Asia/Omsk","GMT-0","America/Noronha","Africa/Harare","America/El_Salvador","PST8PDT","America/Fortaleza","Etc/UTC","Pacific/Johnston","GB-Eire","US/Michigan","Europe/Athens","Australia/Lord_Howe","Europe/Volgograd","Asia/Istanbul","Australia/Queensland","America/Maceio","America/Tegucigalpa","Asia/Gaza","Pacific/Apia","Asia/Famagusta","America/Argentina/Buenos_Aires","Asia/Shanghai","America/Grenada","Canada/Eastern","Pacific/Pago_Pago","Singapore","WET","America/Swift_Current","Portugal","Africa/Kinshasa","Africa/Nairobi","Asia/Dili","GB","Asia/Sakhalin","America/Montevideo","Pacific/Tarawa","Asia/Yakutsk","Canada/Pacific","Africa/Nouakchott","Europe/Bratislava"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":true,"trace_as_metadata":true,"type":"str","value":"UTC"},"timezone_text":{"_input_type":"MessageTextInput","advanced":false,"display_name":"Timezone Text","dynamic":false,"info":"The timezone to convert the date to. If not provided, the default timezone will be used.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"timezone_text","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"use_message_input":{"_input_type":"BoolInput","advanced":false,"display_name":"Use Message Input","dynamic":false,"info":"If true, the tool will use the message input as the date to convert.","list":false,"list_add_label":"Add More","name":"use_message_input","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":false}},"tool_mode":false},"showNode":true,"type":"convert_timezone_tool"},"id":"convert_timezone_tool-o0Rhd","measured":{"height":353,"width":320},"position":{"x":-570.064925634648,"y":1117.4781442628155},"selected":false,"type":"genericNode"},{"data":{"id":"Webhook-IU4Zq","node":{"base_classes":["Data"],"beta":false,"conditional_paths":[],"custom_fields":{},"display_name":"Webhook","documentation":"","edited":false,"field_order":["data","curl","endpoint"],"frozen":false,"icon":"webhook","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Data","hidden":false,"method":"build_data","name":"output_data","selected":"Data","tool_mode":true,"types":["Data"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"import json\n\nfrom langflow.custom import Component\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema import Data\n\n\nclass WebhookComponent(Component):\n    display_name = \"Webhook\"\n    name = \"Webhook\"\n    icon = \"webhook\"\n\n    inputs = [\n        MultilineInput(\n            name=\"data\",\n            display_name=\"Payload\",\n            info=\"Receives a payload from external systems via HTTP POST.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"curl\",\n            display_name=\"cURL\",\n            value=\"CURL_WEBHOOK\",\n            advanced=True,\n            input_types=[],\n        ),\n        MultilineInput(\n            name=\"endpoint\",\n            display_name=\"Endpoint\",\n            value=\"BACKEND_URL\",\n            advanced=False,\n            copy_field=True,\n            input_types=[],\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Data\", name=\"output_data\", method=\"build_data\"),\n    ]\n\n    def build_data(self) -> Data:\n        message: str | Data = \"\"\n        if not self.data:\n            self.status = \"No data provided.\"\n            return Data(data={})\n        try:\n            body = json.loads(self.data or \"{}\")\n        except json.JSONDecodeError:\n            body = {\"payload\": self.data}\n            message = f\"Invalid JSON payload. Please check the format.\\n\\n{self.data}\"\n        data = Data(data=body)\n        if not message:\n            message = data\n        self.status = message\n        return data\n"},"curl":{"_input_type":"MultilineInput","advanced":true,"copy_field":false,"display_name":"cURL","dynamic":false,"info":"","input_types":[],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"curl","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"CURL_WEBHOOK"},"data":{"_input_type":"MultilineInput","advanced":true,"copy_field":false,"display_name":"Payload","dynamic":false,"info":"Receives a payload from external systems via HTTP POST.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"data","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"endpoint":{"_input_type":"MultilineInput","advanced":false,"copy_field":true,"display_name":"Endpoint","dynamic":false,"info":"","input_types":[],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"endpoint","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"BACKEND_URL"}},"tool_mode":false},"showNode":true,"type":"Webhook"},"id":"Webhook-IU4Zq","measured":{"height":197,"width":320},"position":{"x":-1323.7426054787986,"y":-282.8463440850746},"selected":false,"type":"genericNode"},{"data":{"id":"get_custom_markdown_formats_tool-S5Wae","node":{"base_classes":["Tool"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Retrieves custom markdown formats.","display_name":"Get Custom Markdown Formats Tool","documentation":"","edited":true,"field_order":["langboard_variables"],"frozen":false,"icon":"markdown","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Tool","hidden":false,"method":"build_tool","name":"converted_date","options":null,"required_inputs":null,"selected":"Tool","tool_mode":true,"types":["Tool"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.io import Output, HandleInput\r\nfrom langchain_core.tools import StructuredTool\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass GetCustomMarkdownFormatsToolComponent(LCToolComponent):\r\n    display_name = \"Get Custom Markdown Formats Tool\"\r\n    description = \"Retrieves custom markdown formats.\"\r\n    icon = \"markdown\"\r\n    name = \"get_custom_markdown_formats_tool\"\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"langboard_variables\",\r\n            display_name=\"Langboard Variables\",\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Tool\", name=\"converted_date\", method=\"build_tool\"),\r\n    ]\r\n\r\n    def build_tool(self) -> Tool:\r\n        class GetCustomMarkdownFormatsInput(BaseModel):\r\n            pass\r\n\r\n        variables = self._get_langboard_variables()\r\n\r\n        def get_custom_markdown_formats(*args, **kwargs) -> dict:\r\n            return variables.get(\"custom_markdown_formats\", {})\r\n\r\n        return StructuredTool(\r\n            name=\"get_custom_markdown_formats\",\r\n            description=\"Gets custom markdown formats.\",\r\n            args_schema=GetCustomMarkdownFormatsInput,\r\n            func=get_custom_markdown_formats,\r\n        )\r\n\r\n    def _get_langboard_variables(self) -> dict:\r\n        if not self.langboard_variables or not self.langboard_variables.data:\r\n            raise Exception(\"No Langboard variables found.\")\r\n\r\n        return self.langboard_variables.data\r\n"},"langboard_variables":{"_input_type":"HandleInput","advanced":false,"display_name":"Langboard Variables","dynamic":false,"info":"","input_types":["Data"],"list":false,"list_add_label":"Add More","name":"langboard_variables","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""}},"tool_mode":false},"showNode":true,"type":"get_custom_markdown_formats_tool"},"id":"get_custom_markdown_formats_tool-S5Wae","measured":{"height":187,"width":320},"position":{"x":-131.76656044007473,"y":965.4397150324269},"selected":false,"type":"genericNode"},{"data":{"id":"Agent-r81GD","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Define the agent's instructions, then enter a task to complete using tools.","display_name":"Agent","documentation":"","edited":false,"field_order":["agent_llm","max_tokens","model_kwargs","json_mode","model_name","openai_api_base","api_key","temperature","seed","max_retries","timeout","system_prompt","tools","input_value","handle_parsing_errors","verbose","max_iterations","agent_description","memory","sender","sender_name","n_messages","session_id","order","template","add_current_date_tool"],"frozen":false,"icon":"bot","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Response","hidden":null,"method":"message_response","name":"response","options":null,"required_inputs":null,"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","add_current_date_tool":{"_input_type":"BoolInput","advanced":true,"display_name":"Current Date","dynamic":false,"info":"If true, will add a tool to the agent that returns the current date.","input_types":[],"list":false,"list_add_label":"Add More","name":"add_current_date_tool","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":true},"agent_description":{"_input_type":"MultilineInput","advanced":true,"copy_field":false,"display_name":"Agent Description [Deprecated]","dynamic":false,"info":"The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"agent_description","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"A helpful assistant with access to the following tools:"},"agent_llm":{"_input_type":"DropdownInput","advanced":false,"combobox":false,"dialog_inputs":{},"display_name":"Language Model","dynamic":false,"info":"","input_types":["LanguageModel"],"name":"agent_llm","options":["Amazon Bedrock","Anthropic","Azure OpenAI","Google Generative AI","Groq","NVIDIA","OpenAI","SambaNova","Custom"],"options_metadata":[{"icon":"Amazon"},{"icon":"Anthropic"},{"icon":"Azure"},{"icon":"GoogleGenerativeAI"},{"icon":"Groq"},{"icon":"NVIDIA"},{"icon":"OpenAI"},{"icon":"SambaNova"},{"icon":"brain"}],"placeholder":"","real_time_refresh":true,"required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","input_types":[],"list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"},"handle_parsing_errors":{"_input_type":"BoolInput","advanced":true,"display_name":"Handle Parse Errors","dynamic":false,"info":"Should the Agent fix errors when reading user input for better processing?","input_types":[],"list":false,"list_add_label":"Add More","name":"handle_parsing_errors","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":true},"input_value":{"_input_type":"MessageTextInput","advanced":false,"display_name":"Input","dynamic":false,"info":"The input provided by the user for the agent to process.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":true,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"max_iterations":{"_input_type":"IntInput","advanced":true,"display_name":"Max Iterations","dynamic":false,"info":"The maximum number of attempts the agent can make to complete its task before it stops.","input_types":[],"list":false,"list_add_label":"Add More","name":"max_iterations","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":15},"memory":{"_input_type":"HandleInput","advanced":true,"display_name":"External Memory","dynamic":false,"info":"Retrieve messages from an external memory. If empty, it will use the Langflow tables.","input_types":["Memory"],"list":false,"list_add_label":"Add More","name":"memory","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"n_messages":{"_input_type":"IntInput","advanced":false,"display_name":"Number of Messages","dynamic":false,"info":"Number of messages to retrieve.","input_types":[],"list":false,"list_add_label":"Add More","name":"n_messages","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":0},"order":{"_input_type":"DropdownInput","advanced":true,"combobox":false,"dialog_inputs":{},"display_name":"Order","dynamic":false,"info":"Order of the messages.","input_types":[],"name":"order","options":["Ascending","Descending"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":true,"trace_as_metadata":true,"type":"str","value":"Ascending"},"sender":{"_input_type":"DropdownInput","advanced":true,"combobox":false,"dialog_inputs":{},"display_name":"Sender Type","dynamic":false,"info":"Filter by sender type.","input_types":[],"name":"sender","options":["Machine","User","Machine and User"],"options_metadata":[],"placeholder":"","required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":"Machine and User"},"sender_name":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Filter by sender name.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"session_id":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"system_prompt":{"_input_type":"MultilineInput","advanced":false,"copy_field":false,"display_name":"Agent Instructions","dynamic":false,"info":"System Prompt: Initial instructions and context provided to guide the agent's behavior.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"system_prompt","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"You are a helpful assistant that can use tools to answer questions and perform tasks."},"template":{"_input_type":"MultilineInput","advanced":true,"copy_field":false,"display_name":"Template","dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{sender_name}: {text}"},"tools":{"_input_type":"HandleInput","advanced":false,"display_name":"Tools","dynamic":false,"info":"These are the tools that the agent can use to help with tasks.","input_types":["Tool"],"list":true,"list_add_label":"Add More","name":"tools","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"verbose":{"_input_type":"BoolInput","advanced":true,"display_name":"Verbose","dynamic":false,"info":"","input_types":[],"list":false,"list_add_label":"Add More","name":"verbose","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":true}},"tool_mode":false},"showNode":true,"type":"Agent"},"dragging":false,"id":"Agent-r81GD","measured":{"height":539,"width":320},"position":{"x":1232.6525599269032,"y":433.8062700591281},"selected":false,"type":"genericNode"},{"data":{"id":"OllamaModel-aYbAX","node":{"base_classes":["LanguageModel","Message"],"beta":false,"category":"models","conditional_paths":[],"custom_fields":{},"description":"Generate text using Ollama Local LLMs.","display_name":"Ollama","documentation":"","edited":false,"field_order":["base_url","model_name","temperature","format","metadata","mirostat","mirostat_eta","mirostat_tau","num_ctx","num_gpu","num_thread","repeat_last_n","repeat_penalty","tfs_z","timeout","top_k","top_p","verbose","tags","stop_tokens","system","tool_model_enabled","template","input_value","system_message","stream"],"frozen":false,"icon":"Ollama","key":"OllamaModel","legacy":false,"metadata":{},"minimized":false,"output_types":[],"outputs":[{"allows_loop":false,"cache":true,"display_name":"Message","hidden":null,"method":"text_response","name":"text_output","options":null,"required_inputs":[],"selected":"Message","tool_mode":true,"types":["Message"],"value":"__UNDEFINED__"},{"allows_loop":false,"cache":true,"display_name":"Language Model","hidden":false,"method":"build_model","name":"model_output","options":null,"required_inputs":[],"selected":"LanguageModel","tool_mode":true,"types":["LanguageModel"],"value":"__UNDEFINED__"}],"pinned":false,"score":1.1514907767935298e-16,"template":{"_type":"Component","base_url":{"_input_type":"MessageTextInput","advanced":false,"display_name":"Base URL","dynamic":false,"info":"Endpoint of the Ollama API.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"base_url","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_TOOL_MODELS_BASE, URL_LIST\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SliderInput\nfrom langflow.logging import logger\n\nHTTP_STATUS_OK = 200\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    # Define constants for JSON keys\n    JSON_MODELS_KEY = \"models\"\n    JSON_NAME_KEY = \"name\"\n    JSON_CAPABILITIES_KEY = \"capabilities\"\n    DESIRED_CAPABILITY = \"completion\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API.\",\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=[],\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\", display_name=\"Format\", info=\"Specify the format of the output (e.g., json).\", advanced=True\n        ),\n        DictInput(name=\"metadata\", display_name=\"Metadata\", info=\"Metadata to add to the run trace.\", advanced=True),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(name=\"tfs_z\", display_name=\"TFS Z\", info=\"Tail free sampling value. (Default: 1)\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", info=\"Timeout for the request stream.\", advanced=True),\n        IntInput(\n            name=\"top_k\", display_name=\"Top K\", info=\"Limits token selection to top K. (Default: 40)\", advanced=True\n        ),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", info=\"Works together with top-k. (Default: 0.9)\", advanced=True),\n        BoolInput(name=\"verbose\", display_name=\"Verbose\", info=\"Whether to print out response text.\", advanced=True),\n        MessageTextInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system\", display_name=\"System\", info=\"System to use for generating text.\", advanced=True\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Tool Model Enabled\",\n            info=\"Whether to enable tool calling in the model.\",\n            value=False,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"template\", display_name=\"Template\", info=\"Template to use for generating text.\", advanced=True\n        ),\n        *LCModelComponent._base_inputs,\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n            \"template\": self.template,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n\n        return output\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(urljoin(url, \"api/tags\"))).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name in {\"base_url\", \"model_name\"} and not await self.is_valid_ollama_url(\n            build_config[\"base_url\"].get(\"value\", \"\")\n        ):\n            # Check if any URL in the list is valid\n            valid_url = \"\"\n            for url in URL_LIST:\n                if await self.is_valid_ollama_url(url):\n                    valid_url = url\n                    break\n            if valid_url != \"\":\n                build_config[\"base_url\"][\"value\"] = valid_url\n            else:\n                msg = \"No valid Ollama URL found.\"\n                raise ValueError(msg)\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(self.base_url, tool_model_enabled)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(\n                    build_config[\"base_url\"].get(\"value\", \"\"), tool_model_enabled\n                )\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    async def get_models(self, base_url_value: str, tool_model_enabled: bool | None = None) -> list[str]:\n        \"\"\"Fetches a list of models from the Ollama API that do not have the \"embedding\" capability.\n\n        Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.\n        \"\"\"\n        try:\n            # Normalize the base URL to avoid the repeated \"/\" at the end\n            base_url = base_url_value.rstrip(\"/\") + \"/\"\n\n            # Ollama REST API to return models\n            tags_url = urljoin(base_url, \"api/tags\")\n\n            # Ollama REST API to return model capabilities\n            show_url = urljoin(base_url, \"api/show\")\n\n            async with httpx.AsyncClient() as client:\n                # Fetch available models\n                tags_response = await client.get(tags_url)\n                tags_response.raise_for_status()\n                models = await tags_response.json()\n                logger.debug(f\"Available models: {models}\")\n\n                # Filter models that are NOT embedding models\n                model_ids = []\n                for model in models[self.JSON_MODELS_KEY]:\n                    model_name = model[self.JSON_NAME_KEY]\n                    logger.debug(f\"Checking model: {model_name}\")\n\n                    payload = {\"model\": model_name}\n                    show_response = await client.post(show_url, json=payload)\n                    show_response.raise_for_status()\n                    json_data = await show_response.json()\n                    capabilities = json_data.get(self.JSON_CAPABILITIES_KEY, [])\n                    logger.debug(f\"Model: {model_name}, Capabilities: {capabilities}\")\n\n                    if self.DESIRED_CAPABILITY in capabilities:\n                        model_ids.append(model_name)\n\n        except (httpx.RequestError, ValueError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return (\n            model_ids if not tool_model_enabled else [model for model in model_ids if self.supports_tool_calling(model)]\n        )\n\n    def supports_tool_calling(self, model: str) -> bool:\n        \"\"\"Check if model name is in the base of any models example llama3.3 can have 1b and 2b.\"\"\"\n        return any(model.startswith(f\"{tool_model}\") for tool_model in OLLAMA_TOOL_MODELS_BASE)\n"},"format":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Format","dynamic":false,"info":"Specify the format of the output (e.g., json).","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"format","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"input_value":{"_input_type":"MessageInput","advanced":false,"display_name":"Input","dynamic":false,"info":"","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"metadata":{"_input_type":"DictInput","advanced":true,"display_name":"Metadata","dynamic":false,"info":"Metadata to add to the run trace.","list":false,"list_add_label":"Add More","name":"metadata","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"type":"dict","value":{}},"mirostat":{"_input_type":"DropdownInput","advanced":true,"combobox":false,"dialog_inputs":{},"display_name":"Mirostat","dynamic":false,"info":"Enable/disable Mirostat sampling for controlling perplexity.","name":"mirostat","options":["Disabled","Mirostat","Mirostat 2.0"],"options_metadata":[],"placeholder":"","real_time_refresh":true,"required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":"Disabled"},"mirostat_eta":{"_input_type":"FloatInput","advanced":true,"display_name":"Mirostat Eta","dynamic":false,"info":"Learning rate for Mirostat algorithm. (Default: 0.1)","list":false,"list_add_label":"Add More","name":"mirostat_eta","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"float","value":""},"mirostat_tau":{"_input_type":"FloatInput","advanced":true,"display_name":"Mirostat Tau","dynamic":false,"info":"Controls the balance between coherence and diversity of the output. (Default: 5.0)","list":false,"list_add_label":"Add More","name":"mirostat_tau","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"float","value":""},"model_name":{"_input_type":"DropdownInput","advanced":false,"combobox":false,"dialog_inputs":{},"display_name":"Model Name","dynamic":false,"info":"Refer to https://ollama.com/library for more models.","name":"model_name","options":[],"options_metadata":[],"placeholder":"","real_time_refresh":true,"refresh_button":true,"required":false,"show":true,"title_case":false,"toggle":false,"tool_mode":false,"trace_as_metadata":true,"type":"str","value":""},"num_ctx":{"_input_type":"IntInput","advanced":true,"display_name":"Context Window Size","dynamic":false,"info":"Size of the context window for generating tokens. (Default: 2048)","list":false,"list_add_label":"Add More","name":"num_ctx","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":""},"num_gpu":{"_input_type":"IntInput","advanced":true,"display_name":"Number of GPUs","dynamic":false,"info":"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)","list":false,"list_add_label":"Add More","name":"num_gpu","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":""},"num_thread":{"_input_type":"IntInput","advanced":true,"display_name":"Number of Threads","dynamic":false,"info":"Number of threads to use during computation. (Default: detected for optimal performance)","list":false,"list_add_label":"Add More","name":"num_thread","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":""},"repeat_last_n":{"_input_type":"IntInput","advanced":true,"display_name":"Repeat Last N","dynamic":false,"info":"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)","list":false,"list_add_label":"Add More","name":"repeat_last_n","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":""},"repeat_penalty":{"_input_type":"FloatInput","advanced":true,"display_name":"Repeat Penalty","dynamic":false,"info":"Penalty for repetitions in generated text. (Default: 1.1)","list":false,"list_add_label":"Add More","name":"repeat_penalty","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"float","value":""},"stop_tokens":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Stop Tokens","dynamic":false,"info":"Comma-separated list of tokens to signal the model to stop generating text.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"stop_tokens","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"stream":{"_input_type":"BoolInput","advanced":true,"display_name":"Stream","dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","list":false,"list_add_label":"Add More","name":"stream","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":false},"system":{"_input_type":"MessageTextInput","advanced":true,"display_name":"System","dynamic":false,"info":"System to use for generating text.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"system","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"system_message":{"_input_type":"MultilineInput","advanced":false,"copy_field":false,"display_name":"System Message","dynamic":false,"info":"System message to pass to the model.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"multiline":true,"name":"system_message","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"tags":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Tags","dynamic":false,"info":"Comma-separated list of tags to add to the run trace.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"tags","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"temperature":{"_input_type":"SliderInput","advanced":true,"display_name":"Temperature","dynamic":false,"info":"","max_label":"","max_label_icon":"","min_label":"","min_label_icon":"","name":"temperature","placeholder":"","range_spec":{"max":1,"min":0,"step":0.01,"step_type":"float"},"required":false,"show":true,"slider_buttons":false,"slider_buttons_options":[],"slider_input":false,"title_case":false,"tool_mode":false,"type":"slider","value":0.1},"template":{"_input_type":"MessageTextInput","advanced":true,"display_name":"Template","dynamic":false,"info":"Template to use for generating text.","input_types":["Message"],"list":false,"list_add_label":"Add More","load_from_db":false,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"tfs_z":{"_input_type":"FloatInput","advanced":true,"display_name":"TFS Z","dynamic":false,"info":"Tail free sampling value. (Default: 1)","list":false,"list_add_label":"Add More","name":"tfs_z","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"float","value":""},"timeout":{"_input_type":"IntInput","advanced":true,"display_name":"Timeout","dynamic":false,"info":"Timeout for the request stream.","list":false,"list_add_label":"Add More","name":"timeout","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":""},"tool_model_enabled":{"_input_type":"BoolInput","advanced":false,"display_name":"Tool Model Enabled","dynamic":false,"info":"Whether to enable tool calling in the model.","list":false,"list_add_label":"Add More","name":"tool_model_enabled","placeholder":"","real_time_refresh":true,"required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":false},"top_k":{"_input_type":"IntInput","advanced":true,"display_name":"Top K","dynamic":false,"info":"Limits token selection to top K. (Default: 40)","list":false,"list_add_label":"Add More","name":"top_k","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"int","value":""},"top_p":{"_input_type":"FloatInput","advanced":true,"display_name":"Top P","dynamic":false,"info":"Works together with top-k. (Default: 0.9)","list":false,"list_add_label":"Add More","name":"top_p","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"float","value":""},"verbose":{"_input_type":"BoolInput","advanced":true,"display_name":"Verbose","dynamic":false,"info":"Whether to print out response text.","list":false,"list_add_label":"Add More","name":"verbose","placeholder":"","required":false,"show":true,"title_case":false,"tool_mode":false,"trace_as_metadata":true,"type":"bool","value":false}},"tool_mode":false},"showNode":true,"type":"OllamaModel"},"dragging":false,"id":"OllamaModel-aYbAX","measured":{"height":565,"width":320},"position":{"x":858.4810444173002,"y":-142.26532873448656},"selected":true,"type":"genericNode"}],"viewport":{"x":106.99100092005915,"y":390.2712970771,"zoom":0.9189586839976293}},"description":"Unravel the Art of Articulation.","endpoint_name":null,"folder_id":"3b984576-c4b0-47a7-bda6-a6b8c2e74baa","fs_path":null,"gradient":null,"icon":null,"icon_bg_color":null,"id":"d9fd1652-12e2-4278-860a-290a8247490e","is_component":false,"locked":false,"mcp_enabled":true,"name":"Ollama default flow","tags":[],"updated_at":"2025-09-09T11:29:23+00:00","user_id":"43d3cdb2-f457-4ea4-921d-f67ae42d71f2","webhook":true}