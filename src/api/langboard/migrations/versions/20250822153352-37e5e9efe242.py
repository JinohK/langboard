"""empty message

Revision ID: 37e5e9efe242
Revises:
Create Date: 2025-08-22 15:33:52.783688

"""

from typing import Sequence, Union
import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op
from core.db.ColumnTypes import (
    CSVType,
    EnumLikeType,
    ModelColumnListType,
    ModelColumnType,
    SecretStrType,
    SnowflakeIDType,
)
from core.db.Models import ChatContentModel, EditorContentModel
from core.storage.FileModel import FileModel
from models.AppSetting import AppSettingType
from models.BaseBotModel import BotPlatform, BotPlatformRunningType
from models.BotLog import BotLogMessage, BotLogType
from models.BotSchedule import BotScheduleRunningType, BotScheduleStatus
from models.InternalBot import InternalBotType
from models.ProjectActivity import ProjectActivityType
from models.ProjectWikiActivity import ProjectWikiActivityType
from models.UserActivity import UserActivityType
from models.UserNotification import NotificationType
from models.UserNotificationUnsubscription import NotificationChannel, NotificationScope


# revision identifiers, used by Alembic.
revision: str = "37e5e9efe242"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "app_setting",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("setting_type", EnumLikeType(AppSettingType), nullable=False),
        sa.Column("setting_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("setting_value", sa.TEXT(), nullable=False),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("total_used_count", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bot",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("platform", EnumLikeType(BotPlatform), nullable=False),
        sa.Column("platform_running_type", EnumLikeType(BotPlatformRunningType), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("bot_uname", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("avatar", ModelColumnType(FileModel), nullable=True),
        sa.Column("api_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("api_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("app_api_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("ip_whitelist", CSVType, nullable=False),
        sa.Column("value", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "chat_template",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("filterable_table", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("filterable_id", SnowflakeIDType, nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("template", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "global_card_relationship_type",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("parent_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("child_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "internal_bot",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("platform", EnumLikeType(BotPlatform), nullable=False),
        sa.Column("platform_running_type", EnumLikeType(BotPlatformRunningType), nullable=False),
        sa.Column("bot_type", EnumLikeType(InternalBotType), nullable=False),
        sa.Column("display_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("api_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("value", sa.Text(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.Column("avatar", ModelColumnType(FileModel), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("firstname", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lastname", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("password", SecretStrType, nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("avatar", ModelColumnType(FileModel), nullable=True),
        sa.Column("preferred_lang", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("activated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "bot_log",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("log_type", EnumLikeType(BotLogType), nullable=False),
        sa.Column("message_stack", ModelColumnListType(BotLogMessage), nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_bot_log_bot_id"), "bot_log", ["bot_id"], unique=False)
    op.create_table(
        "bot_schedule",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_id", SnowflakeIDType, nullable=False),
        sa.Column("running_type", EnumLikeType(BotScheduleRunningType), nullable=False),
        sa.Column("status", EnumLikeType(BotScheduleStatus), nullable=False),
        sa.Column("interval_str", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("start_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("end_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_bot_schedule_bot_id"), "bot_schedule", ["bot_id"], unique=False)
    op.create_table(
        "chat_history",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("filterable_table", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("filterable_id", SnowflakeIDType, nullable=True),
        sa.Column("sender_id", SnowflakeIDType, nullable=True),
        sa.Column("receiver_id", SnowflakeIDType, nullable=True),
        sa.Column("message", ModelColumnType(ChatContentModel), nullable=False),
        sa.ForeignKeyConstraint(["receiver_id"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sender_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("owner_id", SnowflakeIDType, nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("ai_description", sa.TEXT(), nullable=True),
        sa.Column("project_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_owner_id"), "project", ["owner_id"], unique=False)
    op.create_table(
        "user_activity",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("activity_history", sa.JSON(), nullable=False),
        sa.Column("activity_type", EnumLikeType(UserActivityType), nullable=True),
        sa.Column("refer_activity_table", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("refer_activity_id", SnowflakeIDType, nullable=True),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_email",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("verified_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email_user_id"), "user_email", ["user_id"], unique=False)
    op.create_table(
        "user_group",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_group_user_id"), "user_group", ["user_id"], unique=False)
    op.create_table(
        "user_notification",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("notifier_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("notifier_id", SnowflakeIDType, nullable=False),
        sa.Column("receiver_id", SnowflakeIDType, nullable=False),
        sa.Column("notification_type", EnumLikeType(NotificationType), nullable=False),
        sa.Column("message_vars", sa.JSON(), nullable=False),
        sa.Column("record_list", sa.JSON(), nullable=False),
        sa.Column("read_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["receiver_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_notification_notifier_id"), "user_notification", ["notifier_id"], unique=False)
    op.create_index(op.f("ix_user_notification_receiver_id"), "user_notification", ["receiver_id"], unique=False)
    op.create_table(
        "user_notification_unsubscription",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("channel", EnumLikeType(NotificationChannel), nullable=False),
        sa.Column("notification_type", EnumLikeType(NotificationType), nullable=False),
        sa.Column("scope_type", EnumLikeType(NotificationScope), nullable=False),
        sa.Column("specific_table", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("specific_id", SnowflakeIDType, nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_notification_unsubscription_user_id"),
        "user_notification_unsubscription",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "user_profile",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("industry", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("purpose", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("affiliation", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("position", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "project_assigned_internal_bot",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("internal_bot_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["internal_bot_id"], ["internal_bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_project_assigned_internal_bot_internal_bot_id"),
        "project_assigned_internal_bot",
        ["internal_bot_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_assigned_internal_bot_project_id"),
        "project_assigned_internal_bot",
        ["project_id"],
        unique=False,
    )
    op.create_table(
        "project_assigned_user",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("starred", sa.Boolean(), nullable=False),
        sa.Column("last_viewed_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_assigned_user_project_id"), "project_assigned_user", ["project_id"], unique=False)
    op.create_index(op.f("ix_project_assigned_user_user_id"), "project_assigned_user", ["user_id"], unique=False)
    op.create_table(
        "project_column",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("is_archive", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_column_project_id"), "project_column", ["project_id"], unique=False)
    op.create_table(
        "project_invitation",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_invitation_project_id"), "project_invitation", ["project_id"], unique=False)
    op.create_table(
        "project_label",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("color", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_label_project_id"), "project_label", ["project_id"], unique=False)
    op.create_table(
        "project_role",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("actions", CSVType, nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_role_project_id"), "project_role", ["project_id"], unique=False)
    op.create_table(
        "project_wiki",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content", ModelColumnType(EditorContentModel), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("is_public", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_wiki_project_id"), "project_wiki", ["project_id"], unique=False)
    op.create_table(
        "user_group_assigned_email",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("group_id", SnowflakeIDType, nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["user_group.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_group_assigned_email_group_id"), "user_group_assigned_email", ["group_id"], unique=False
    )
    op.create_table(
        "card",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("project_id", SnowflakeIDType, nullable=False),
        sa.Column("project_column_id", SnowflakeIDType, nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", ModelColumnType(EditorContentModel), nullable=False),
        sa.Column("ai_description", sa.TEXT(), nullable=True),
        sa.Column("deadline_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("archived_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["project_column_id"], ["project_column.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_project_column_id"), "card", ["project_column_id"], unique=False)
    op.create_index(op.f("ix_card_project_id"), "card", ["project_id"], unique=False)
    op.create_table(
        "project_column_bot_log",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_log_id", SnowflakeIDType, nullable=True),
        sa.Column("project_column_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_log_id"], ["bot_log.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_column_id"], ["project_column.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_project_column_bot_log_bot_log_id"), "project_column_bot_log", ["bot_log_id"], unique=False
    )
    op.create_index(
        op.f("ix_project_column_bot_log_project_column_id"),
        "project_column_bot_log",
        ["project_column_id"],
        unique=False,
    )
    op.create_table(
        "project_column_bot_schedule",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_schedule_id", SnowflakeIDType, nullable=False),
        sa.Column("project_column_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_schedule_id"], ["bot_schedule.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_column_id"], ["project_column.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_project_column_bot_schedule_bot_schedule_id"),
        "project_column_bot_schedule",
        ["bot_schedule_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_column_bot_schedule_project_column_id"),
        "project_column_bot_schedule",
        ["project_column_id"],
        unique=False,
    )
    op.create_table(
        "project_column_bot_scope",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("conditions", CSVType, nullable=False),
        sa.Column("project_column_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_column_id"], ["project_column.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_column_bot_scope_bot_id"), "project_column_bot_scope", ["bot_id"], unique=False)
    op.create_index(
        op.f("ix_project_column_bot_scope_project_column_id"),
        "project_column_bot_scope",
        ["project_column_id"],
        unique=False,
    )
    op.create_table(
        "project_wiki_activity",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("activity_history", sa.JSON(), nullable=False),
        sa.Column("project_id", SnowflakeIDType, nullable=True),
        sa.Column("project_wiki_id", SnowflakeIDType, nullable=True),
        sa.Column("activity_type", EnumLikeType(ProjectWikiActivityType), nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_wiki_id"], ["project_wiki.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_wiki_activity_project_id"), "project_wiki_activity", ["project_id"], unique=False)
    op.create_index(
        op.f("ix_project_wiki_activity_project_wiki_id"), "project_wiki_activity", ["project_wiki_id"], unique=False
    )
    op.create_table(
        "project_wiki_assigned_user",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("project_assigned_id", SnowflakeIDType, nullable=False),
        sa.Column("project_wiki_id", SnowflakeIDType, nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["project_assigned_id"], ["project_assigned_user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_wiki_id"], ["project_wiki.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_project_wiki_assigned_user_project_assigned_id"),
        "project_wiki_assigned_user",
        ["project_assigned_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_wiki_assigned_user_project_wiki_id"),
        "project_wiki_assigned_user",
        ["project_wiki_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_wiki_assigned_user_user_id"), "project_wiki_assigned_user", ["user_id"], unique=False
    )
    op.create_table(
        "project_wiki_attachment",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("wiki_id", SnowflakeIDType, nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("file", ModelColumnType(FileModel), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["wiki_id"], ["project_wiki.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_wiki_attachment_user_id"), "project_wiki_attachment", ["user_id"], unique=False)
    op.create_index(op.f("ix_project_wiki_attachment_wiki_id"), "project_wiki_attachment", ["wiki_id"], unique=False)
    op.create_table(
        "project_wiki_metadata",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("value", sa.TEXT(), nullable=False),
        sa.Column("project_wiki_id", SnowflakeIDType, nullable=True),
        sa.ForeignKeyConstraint(["project_wiki_id"], ["project_wiki.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_wiki_metadata_key"), "project_wiki_metadata", ["key"], unique=False)
    op.create_index(
        op.f("ix_project_wiki_metadata_project_wiki_id"), "project_wiki_metadata", ["project_wiki_id"], unique=False
    )
    op.create_table(
        "card_assigned_project_label",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.Column("project_label_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_label_id"], ["project_label.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_card_assigned_project_label_card_id"), "card_assigned_project_label", ["card_id"], unique=False
    )
    op.create_index(
        op.f("ix_card_assigned_project_label_project_label_id"),
        "card_assigned_project_label",
        ["project_label_id"],
        unique=False,
    )
    op.create_table(
        "card_assigned_user",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("project_assigned_id", SnowflakeIDType, nullable=False),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_assigned_id"], ["project_assigned_user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_assigned_user_card_id"), "card_assigned_user", ["card_id"], unique=False)
    op.create_index(
        op.f("ix_card_assigned_user_project_assigned_id"), "card_assigned_user", ["project_assigned_id"], unique=False
    )
    op.create_index(op.f("ix_card_assigned_user_user_id"), "card_assigned_user", ["user_id"], unique=False)
    op.create_table(
        "card_attachment",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", SnowflakeIDType, nullable=False),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("file", ModelColumnType(FileModel), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_attachment_card_id"), "card_attachment", ["card_id"], unique=False)
    op.create_index(op.f("ix_card_attachment_user_id"), "card_attachment", ["user_id"], unique=False)
    op.create_table(
        "card_bot_log",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_log_id", SnowflakeIDType, nullable=True),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_log_id"], ["bot_log.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_bot_log_bot_log_id"), "card_bot_log", ["bot_log_id"], unique=False)
    op.create_index(op.f("ix_card_bot_log_card_id"), "card_bot_log", ["card_id"], unique=False)
    op.create_table(
        "card_bot_schedule",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_schedule_id", SnowflakeIDType, nullable=False),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_schedule_id"], ["bot_schedule.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_card_bot_schedule_bot_schedule_id"), "card_bot_schedule", ["bot_schedule_id"], unique=False
    )
    op.create_index(op.f("ix_card_bot_schedule_card_id"), "card_bot_schedule", ["card_id"], unique=False)
    op.create_table(
        "card_bot_scope",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("conditions", CSVType, nullable=False),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_bot_scope_bot_id"), "card_bot_scope", ["bot_id"], unique=False)
    op.create_index(op.f("ix_card_bot_scope_card_id"), "card_bot_scope", ["card_id"], unique=False)
    op.create_table(
        "card_comment",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("content", ModelColumnType(EditorContentModel), nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_comment_card_id"), "card_comment", ["card_id"], unique=False)
    op.create_table(
        "card_metadata",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("value", sa.TEXT(), nullable=False),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_metadata_card_id"), "card_metadata", ["card_id"], unique=False)
    op.create_index(op.f("ix_card_metadata_key"), "card_metadata", ["key"], unique=False)
    op.create_table(
        "card_relationship",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("relationship_type_id", SnowflakeIDType, nullable=False),
        sa.Column("card_id_parent", SnowflakeIDType, nullable=False),
        sa.Column("card_id_child", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["card_id_child"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["card_id_parent"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["relationship_type_id"], ["global_card_relationship_type.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_relationship_card_id_child"), "card_relationship", ["card_id_child"], unique=False)
    op.create_index(op.f("ix_card_relationship_card_id_parent"), "card_relationship", ["card_id_parent"], unique=False)
    op.create_index(
        op.f("ix_card_relationship_relationship_type_id"), "card_relationship", ["relationship_type_id"], unique=False
    )
    op.create_table(
        "checklist",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("card_id", SnowflakeIDType, nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("is_checked", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_checklist_card_id"), "checklist", ["card_id"], unique=False)
    op.create_table(
        "project_activity",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("activity_history", sa.JSON(), nullable=False),
        sa.Column("project_id", SnowflakeIDType, nullable=True),
        sa.Column("card_id", SnowflakeIDType, nullable=True),
        sa.Column("activity_type", EnumLikeType(ProjectActivityType), nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["card_id"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_activity_project_id"), "project_activity", ["project_id"], unique=False)
    op.create_table(
        "card_comment_reaction",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("bot_id", SnowflakeIDType, nullable=True),
        sa.Column("reaction_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("comment_id", SnowflakeIDType, nullable=False),
        sa.ForeignKeyConstraint(["bot_id"], ["bot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["comment_id"], ["card_comment.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_card_comment_reaction_comment_id"), "card_comment_reaction", ["comment_id"], unique=False)
    op.create_table(
        "checkitem",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("checklist_id", SnowflakeIDType, nullable=False),
        sa.Column("cardified_id", SnowflakeIDType, nullable=True),
        sa.Column("user_id", SnowflakeIDType, nullable=True),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("status", sa.Enum("Started", "Paused", "Stopped", name="checkitemstatus"), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("accumulated_seconds", sa.Integer(), nullable=False),
        sa.Column("is_checked", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["cardified_id"], ["card.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["checklist_id"], ["checklist.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_checkitem_checklist_id"), "checkitem", ["checklist_id"], unique=False)
    op.create_index(op.f("ix_checkitem_user_id"), "checkitem", ["user_id"], unique=False)
    op.create_table(
        "checkitem_timer_record",
        sa.Column("id", SnowflakeIDType, nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("checkitem_id", SnowflakeIDType, nullable=False),
        sa.Column("status", sa.Enum("Started", "Paused", "Stopped", name="checkitemstatus"), nullable=False),
        sa.ForeignKeyConstraint(["checkitem_id"], ["checkitem.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_checkitem_timer_record_checkitem_id"), "checkitem_timer_record", ["checkitem_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_checkitem_timer_record_checkitem_id"), table_name="checkitem_timer_record")
    op.drop_table("checkitem_timer_record")
    op.drop_index(op.f("ix_checkitem_user_id"), table_name="checkitem")
    op.drop_index(op.f("ix_checkitem_checklist_id"), table_name="checkitem")
    op.drop_table("checkitem")
    op.drop_index(op.f("ix_card_comment_reaction_comment_id"), table_name="card_comment_reaction")
    op.drop_table("card_comment_reaction")
    op.drop_index(op.f("ix_project_activity_project_id"), table_name="project_activity")
    op.drop_table("project_activity")
    op.drop_index(op.f("ix_checklist_card_id"), table_name="checklist")
    op.drop_table("checklist")
    op.drop_index(op.f("ix_card_relationship_relationship_type_id"), table_name="card_relationship")
    op.drop_index(op.f("ix_card_relationship_card_id_parent"), table_name="card_relationship")
    op.drop_index(op.f("ix_card_relationship_card_id_child"), table_name="card_relationship")
    op.drop_table("card_relationship")
    op.drop_index(op.f("ix_card_metadata_key"), table_name="card_metadata")
    op.drop_index(op.f("ix_card_metadata_card_id"), table_name="card_metadata")
    op.drop_table("card_metadata")
    op.drop_index(op.f("ix_card_comment_card_id"), table_name="card_comment")
    op.drop_table("card_comment")
    op.drop_index(op.f("ix_card_bot_scope_card_id"), table_name="card_bot_scope")
    op.drop_index(op.f("ix_card_bot_scope_bot_id"), table_name="card_bot_scope")
    op.drop_table("card_bot_scope")
    op.drop_index(op.f("ix_card_bot_schedule_card_id"), table_name="card_bot_schedule")
    op.drop_index(op.f("ix_card_bot_schedule_bot_schedule_id"), table_name="card_bot_schedule")
    op.drop_table("card_bot_schedule")
    op.drop_index(op.f("ix_card_bot_log_card_id"), table_name="card_bot_log")
    op.drop_index(op.f("ix_card_bot_log_bot_log_id"), table_name="card_bot_log")
    op.drop_table("card_bot_log")
    op.drop_index(op.f("ix_card_attachment_user_id"), table_name="card_attachment")
    op.drop_index(op.f("ix_card_attachment_card_id"), table_name="card_attachment")
    op.drop_table("card_attachment")
    op.drop_index(op.f("ix_card_assigned_user_user_id"), table_name="card_assigned_user")
    op.drop_index(op.f("ix_card_assigned_user_project_assigned_id"), table_name="card_assigned_user")
    op.drop_index(op.f("ix_card_assigned_user_card_id"), table_name="card_assigned_user")
    op.drop_table("card_assigned_user")
    op.drop_index(op.f("ix_card_assigned_project_label_project_label_id"), table_name="card_assigned_project_label")
    op.drop_index(op.f("ix_card_assigned_project_label_card_id"), table_name="card_assigned_project_label")
    op.drop_table("card_assigned_project_label")
    op.drop_index(op.f("ix_project_wiki_metadata_project_wiki_id"), table_name="project_wiki_metadata")
    op.drop_index(op.f("ix_project_wiki_metadata_key"), table_name="project_wiki_metadata")
    op.drop_table("project_wiki_metadata")
    op.drop_index(op.f("ix_project_wiki_attachment_wiki_id"), table_name="project_wiki_attachment")
    op.drop_index(op.f("ix_project_wiki_attachment_user_id"), table_name="project_wiki_attachment")
    op.drop_table("project_wiki_attachment")
    op.drop_index(op.f("ix_project_wiki_assigned_user_user_id"), table_name="project_wiki_assigned_user")
    op.drop_index(op.f("ix_project_wiki_assigned_user_project_wiki_id"), table_name="project_wiki_assigned_user")
    op.drop_index(op.f("ix_project_wiki_assigned_user_project_assigned_id"), table_name="project_wiki_assigned_user")
    op.drop_table("project_wiki_assigned_user")
    op.drop_index(op.f("ix_project_wiki_activity_project_wiki_id"), table_name="project_wiki_activity")
    op.drop_index(op.f("ix_project_wiki_activity_project_id"), table_name="project_wiki_activity")
    op.drop_table("project_wiki_activity")
    op.drop_index(op.f("ix_project_column_bot_scope_project_column_id"), table_name="project_column_bot_scope")
    op.drop_index(op.f("ix_project_column_bot_scope_bot_id"), table_name="project_column_bot_scope")
    op.drop_table("project_column_bot_scope")
    op.drop_index(op.f("ix_project_column_bot_schedule_project_column_id"), table_name="project_column_bot_schedule")
    op.drop_index(op.f("ix_project_column_bot_schedule_bot_schedule_id"), table_name="project_column_bot_schedule")
    op.drop_table("project_column_bot_schedule")
    op.drop_index(op.f("ix_project_column_bot_log_project_column_id"), table_name="project_column_bot_log")
    op.drop_index(op.f("ix_project_column_bot_log_bot_log_id"), table_name="project_column_bot_log")
    op.drop_table("project_column_bot_log")
    op.drop_index(op.f("ix_card_project_id"), table_name="card")
    op.drop_index(op.f("ix_card_project_column_id"), table_name="card")
    op.drop_table("card")
    op.drop_index(op.f("ix_user_group_assigned_email_group_id"), table_name="user_group_assigned_email")
    op.drop_table("user_group_assigned_email")
    op.drop_index(op.f("ix_project_wiki_project_id"), table_name="project_wiki")
    op.drop_table("project_wiki")
    op.drop_index(op.f("ix_project_role_project_id"), table_name="project_role")
    op.drop_table("project_role")
    op.drop_index(op.f("ix_project_label_project_id"), table_name="project_label")
    op.drop_table("project_label")
    op.drop_index(op.f("ix_project_invitation_project_id"), table_name="project_invitation")
    op.drop_table("project_invitation")
    op.drop_index(op.f("ix_project_column_project_id"), table_name="project_column")
    op.drop_table("project_column")
    op.drop_index(op.f("ix_project_assigned_user_user_id"), table_name="project_assigned_user")
    op.drop_index(op.f("ix_project_assigned_user_project_id"), table_name="project_assigned_user")
    op.drop_table("project_assigned_user")
    op.drop_index(op.f("ix_project_assigned_internal_bot_project_id"), table_name="project_assigned_internal_bot")
    op.drop_index(op.f("ix_project_assigned_internal_bot_internal_bot_id"), table_name="project_assigned_internal_bot")
    op.drop_table("project_assigned_internal_bot")
    op.drop_table("user_profile")
    op.drop_index(op.f("ix_user_notification_unsubscription_user_id"), table_name="user_notification_unsubscription")
    op.drop_table("user_notification_unsubscription")
    op.drop_index(op.f("ix_user_notification_receiver_id"), table_name="user_notification")
    op.drop_index(op.f("ix_user_notification_notifier_id"), table_name="user_notification")
    op.drop_table("user_notification")
    op.drop_index(op.f("ix_user_group_user_id"), table_name="user_group")
    op.drop_table("user_group")
    op.drop_index(op.f("ix_user_email_user_id"), table_name="user_email")
    op.drop_table("user_email")
    op.drop_table("user_activity")
    op.drop_index(op.f("ix_project_owner_id"), table_name="project")
    op.drop_table("project")
    op.drop_table("chat_history")
    op.drop_index(op.f("ix_bot_schedule_bot_id"), table_name="bot_schedule")
    op.drop_table("bot_schedule")
    op.drop_index(op.f("ix_bot_log_bot_id"), table_name="bot_log")
    op.drop_table("bot_log")
    op.drop_table("user")
    op.drop_table("internal_bot")
    op.drop_table("global_card_relationship_type")
    op.drop_table("chat_template")
    op.drop_table("bot")
    op.drop_table("app_setting")
    # ### end Alembic commands ###
