from typing import Any, BinaryIO, Literal
from starlette.datastructures import UploadFile
from ..core.ai import BaseBot, InternalBotType, LangflowRequestModel, LangflowStreamResponse, create_bot_data_model


class {bot_type}Bot(BaseBot):
    @staticmethod
    def bot_type() -> Literal[InternalBotType.{bot_type}]:
        """DO NOT EDIT THIS METHOD"""
        return InternalBotType.{bot_type}

    async def run(self, data: dict[str, Any]) -> str | LangflowStreamResponse | None:
        data_model = create_bot_data_model({bot_type}Bot.bot_type(), data)
        # Do something

        # return await self._run_langflow(request_model=LangflowRequestModel(flow_id="", message=..., tweaks={} or None), use_stream=True or False)

    async def run_abortable(
        self, data: dict[str, Any], task_id: str
    ) -> str | LangflowStreamResponse | None:
        data_model = create_bot_data_model({bot_type}Bot.bot_type(), data)
        # Do something

        # return await self._run_langflow_abortable(task_id=task_id, request_model=LangflowRequestModel(flow_id="", message=..., tweaks={} or None), use_stream=True or False)

    async def upload_file(self, file: UploadFile | BinaryIO) -> str | None:
        # If using langflow,
        # return await self._upload_file_to_langflow(file)

    async def is_available(self) -> bool:
        # If using langflow,
        # return await self._is_langflow_available()
