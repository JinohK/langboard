from ....core.db import DbSession
from ....models import {class_name}Role
from .BaseRoleService import BaseRoleService


class {class_name}RoleService(BaseRoleService[{class_name}Role]):
    def __init__(self, db: DbSession):
        super().__init__(db, {class_name}Role)

    @BaseRoleService.class_filterable_with_ids_wrapper({class_name}Role)  # type: ignore
    async def get_roles(self, **kwargs):
        return await super().get_roles(**kwargs)

    @BaseRoleService.class_init_wrapper({class_name}Role)  # type: ignore
    async def grant(self, **kwargs):
        return await super().grant(**kwargs)

    @BaseRoleService.class_filterable_with_user_id_wrapper({class_name}Role)  # type: ignore
    async def grant_all(self, user_id: int, **kwargs):
        return await super().grant_all(user_id, **kwargs)

    @BaseRoleService.class_filterable_with_user_id_wrapper({class_name}Role)  # type: ignore
    async def grant_default(self, user_id: int, **kwargs):
        return await super().grant_default(user_id, **kwargs)

    @BaseRoleService.class_filterable_with_ids_wrapper({class_name}Role)  # type: ignore
    async def withdraw(self, **kwargs):
        return await super().withdraw(**kwargs)
